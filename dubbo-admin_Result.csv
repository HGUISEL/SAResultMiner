Detection ID,Latest Commit ID,PMD Version,Rule Name,File Path,Violation Introducing Commit ID,VIC Date,VIC Line Num.,Latest Detection Commit ID,LDC ID Date,LDC Line Num.,Violation Fixed Commit ID,VFC Date,VFC Line Num.,Fixed Period(day),Original Code,Fixed Code,Really Fixed?,Time
3855,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubbo/governance/web/governance/module/screen/Weights.java,c99b040d43ea88db368ee52f181295758d0a2c47,1515652080,131,b32dd007d291e87a04bc51cc9139aaaebb583604,1516085997,131,,,,,"                    if (port.trim().length() == 0) port = null;",,,9449
3856,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubbo/registry/common/route/ParseUtils.java,c99b040d43ea88db368ee52f181295758d0a2c47,1515652080,256,,,,,,,,"                key = null;",,,9449
3857,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubbo/registry/common/util/IntHashMap.java,c99b040d43ea88db368ee52f181295758d0a2c47,1515652080,314,,,,,,,,"                e.value = null;",,,9449
3858,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubbo/registry/common/util/IntHashMap.java,c99b040d43ea88db368ee52f181295758d0a2c47,1515652080,327,,,,,,,,"            tab[index] = null;",,,9449
3859,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/JettyContainer.java,a4fc1c84df1904b52de5a464d763ae157a1ae348,1515747562,80,,,,,,,,"                connector = null;",,,9449
3860,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/container/JettyContainer.java,9716f380d6e3ab606e9cd5ebe6beceec02b956d4,1515747562,82,,,,,,,,"                connector = null;",,,9449
3861,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubboadmin/registry/common/route/ParseUtils.java,369c83d8ed47c7533cc124b4d86d496225ca10ce,1529041964,257,,,,,,,,"                key = null;",,,9449
3862,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubboadmin/registry/common/util/IntHashMap.java,369c83d8ed47c7533cc124b4d86d496225ca10ce,1529041964,313,,,,,,,,"                e.value = null;",,,9449
3863,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubboadmin/registry/common/util/IntHashMap.java,369c83d8ed47c7533cc124b4d86d496225ca10ce,1529041964,326,,,,,,,,"            tab[index] = null;",,,9449
3864,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/src/main/java/com/alibaba/dubboadmin/web/mvc/governance/WeightsController.java,369c83d8ed47c7533cc124b4d86d496225ca10ce,1529041964,153,aaf3ff8db5ca1415d824e689b15a0e90e4674e61,1529636291,153,,,,,"                    if (port.trim().length() == 0) port = null;",,,9449
3865,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-ops-backend/src/main/java/org/apache/dubbo/admin/registry/common/route/ParseUtils.java,ec776c565f5c41bc17ae7327cce2dbef884a9a24,1534818785,251,,,,,,,,"                key = null;",,,9449
3866,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-ops-backend/src/main/java/org/apache/dubbo/admin/registry/common/util/IntHashMap.java,ec776c565f5c41bc17ae7327cce2dbef884a9a24,1534818785,313,,,,,,,,"                e.value = null;",,,9449
3867,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-ops-backend/src/main/java/org/apache/dubbo/admin/registry/common/util/IntHashMap.java,ec776c565f5c41bc17ae7327cce2dbef884a9a24,1534818785,326,,,,,,,,"            tab[index] = null;",,,9449
3868,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-ops-backend/src/main/java/org/apache/dubbo/admin/web/mvc/governance/WeightsController.java,ec776c565f5c41bc17ae7327cce2dbef884a9a24,1534818785,141,,,,,,,,"                    if (port.trim().length() == 0) port = null;",,,9449
3869,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/registry/common/route/ParseUtils.java,5ba1bdee823dda7698247c737eb9d58cfd382cde,1535021754,251,,,,,,,,"                key = null;",,,9449
3870,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/registry/common/util/IntHashMap.java,5ba1bdee823dda7698247c737eb9d58cfd382cde,1535021754,313,,,,,,,,"                e.value = null;",,,9449
3871,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/registry/common/util/IntHashMap.java,5ba1bdee823dda7698247c737eb9d58cfd382cde,1535021754,326,,,,,,,,"            tab[index] = null;",,,9449
3872,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/web/mvc/governance/WeightsController.java,5ba1bdee823dda7698247c737eb9d58cfd382cde,1535021754,141,,,,,,,,"                    if (port.trim().length() == 0) port = null;",,,9449
3873,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/registry/common/route/ParseUtils.java,48f9e8d965460a4216f28cac41bcae81b0c69f6a,1536586528,251,,,,,,,,"                key = null;",,,9449
3874,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/registry/common/util/IntHashMap.java,48f9e8d965460a4216f28cac41bcae81b0c69f6a,1536586528,313,,,,,,,,"                e.value = null;",,,9449
3875,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/registry/common/util/IntHashMap.java,48f9e8d965460a4216f28cac41bcae81b0c69f6a,1536586528,326,,,,,,,,"            tab[index] = null;",,,9449
3876,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/web/mvc/governance/WeightsController.java,48f9e8d965460a4216f28cac41bcae81b0c69f6a,1536586528,141,,,,7d62197aa767675e9aa1c5f274b44f2f9e8b872a,1537944384,-1,1537944384/1536586528,"                    if (port.trim().length() == 0) port = null;","-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.admin.web.mvc.governance;
-
-import com.alibaba.dubbo.common.utils.CollectionUtils;
-import org.apache.dubbo.admin.governance.service.OverrideService;
-import org.apache.dubbo.admin.governance.service.ProviderService;
-import org.apache.dubbo.admin.registry.common.domain.Provider;
-import org.apache.dubbo.admin.registry.common.domain.Weight;
-import org.apache.dubbo.admin.registry.common.util.OverrideUtils;
-import org.apache.dubbo.admin.web.mvc.BaseController;
-import org.apache.dubbo.admin.web.pulltool.Tool;
-import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.math.NumberUtils;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Controller;
-import org.springframework.ui.Model;
-import org.springframework.validation.support.BindingAwareModelMap;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.io.BufferedReader;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.regex.Pattern;
-
-/**
- * ProvidersController.
- * URI: /services/$service/weights
- *
- */
-@Controller
-@RequestMapping(""/governance/weights"")
-public class WeightsController extends BaseController {
-
-    private static final Pattern IP_PATTERN = Pattern.compile(""\\d{1,3}(\\.\\d{1,3}){3}$"");
-    private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(""127(\\.\\d{1,3}){3}$"");
-    private static final Pattern ALL_IP_PATTERN = Pattern.compile(""0{1,3}(\\.0{1,3}){3}$"");
-    @Autowired
-    private OverrideService overrideService;
-    @Autowired
-    private ProviderService providerService;
-
-    @RequestMapping("""")
-    public String index(HttpServletRequest request, HttpServletResponse response, Model model) {
-        prepare(request, response, model, ""index"", ""weights"");
-        BindingAwareModelMap newModel = (BindingAwareModelMap)model;
-        String service = (String)newModel.get(""service"");
-        String address = (String)newModel.get(""address"");
-        service = StringUtils.trimToNull(service);
-        address = Tool.getIP(address);
-        List<Weight> weights;
-        if (service != null && service.length() > 0) {
-            weights = OverrideUtils.overridesToWeights(overrideService.findByService(service));
-        } else if (address != null && address.length() > 0) {
-            weights = OverrideUtils.overridesToWeights(overrideService.findByAddress(address));
-        } else {
-            weights = OverrideUtils.overridesToWeights(overrideService.findAll());
-        }
-        model.addAttribute(""weights"", weights);
-        return ""governance/screen/weights/index"";
-    }
-
-    /**
-     * load page for the adding
-     *
-     */
-    @RequestMapping(""/add"")
-    public String add(HttpServletRequest request, HttpServletResponse response, Model model) {
-        prepare(request, response, model, ""add"", ""weights"");
-        BindingAwareModelMap newModel = (BindingAwareModelMap)model;
-        String service = (String)newModel.get(""service"");
-        String input = request.getParameter(""input"");
-        if (service != null && service.length() > 0 && !service.contains(""*"")) {
-            List<Provider> providerList = providerService.findByService(service);
-            List<String> addressList = new ArrayList<String>();
-            for (Provider provider : providerList) {
-                addressList.add(provider.getUrl().split(""://"")[1].split(""/"")[0]);
-            }
-            model.addAttribute(""addressList"", addressList);
-            model.addAttribute(""service"", service);
-            model.addAttribute(""methods"", CollectionUtils.sort(providerService.findMethodsByService(service)));
-        } else {
-            List<String> serviceList = Tool.sortSimpleName(providerService.findServices());
-            model.addAttribute(""serviceList"", serviceList);
-        }
-        if (input != null) model.addAttribute(""input"", input);
-        return ""governance/screen/weights/add"";
-    }
-
-
-    @RequestMapping(""/create"")
-    public String create(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
-        prepare(request, response, model, ""create"", ""weights"");
-        String addr = request.getParameter(""address"");
-        String services = request.getParameter(""multiservice"");
-        if (services == null || services.trim().length() == 0) {
-            services = request.getParameter(""service"");
-        }
-        String weight = request.getParameter(""weight"");
-
-        int w = Integer.parseInt(weight);
-
-        Set<String> addresses = new HashSet<String>();
-        BufferedReader reader = new BufferedReader(new StringReader(addr));
-        while (true) {
-            String line = reader.readLine();
-            if (null == line)
-                break;
-
-            String[] split = line.split(""[\\s,;]+"");
-            for (String s : split) {
-                if (s.length() == 0)
-                    continue;
-
-                String ip = s;
-                String port = null;
-                if (s.indexOf("":"") != -1) {
-                    ip = s.substring(0, s.indexOf("":""));
-                    port = s.substring(s.indexOf("":"") + 1, s.length());
-                    if (port.trim().length() == 0) port = null;
-                }
-                if (!IP_PATTERN.matcher(ip).matches()) {
-                    model.addAttribute(""message"", ""illegal IP: "" + s);
-                    model.addAttribute(""success"", false);
-                    model.addAttribute(""redirect"", ""../weights"");
-                    return ""governance/screen/redirect"";
-                }
-                if (LOCAL_IP_PATTERN.matcher(ip).matches() || ALL_IP_PATTERN.matcher(ip).matches()) {
-                    model.addAttribute(""message"", ""local IP or any host ip is illegal: "" + s);
-                    model.addAttribute(""success"", false);
-                    model.addAttribute(""redirect"", ""../weights"");
-                    return ""governance/screen/redirect"";
-                }
-                if (port != null) {
-                    if (!NumberUtils.isDigits(port)) {
-                        model.addAttribute(""message"", ""illegal port: "" + s);
-                        model.addAttribute(""success"", false);
-                        model.addAttribute(""redirect"", ""../weights"");
-                        return ""governance/screen/redirect"";
-                    }
-                }
-                addresses.add(s);
-            }
-        }
-
-        Set<String> aimServices = new HashSet<String>();
-        reader = new BufferedReader(new StringReader(services));
-        while (true) {
-            String line = reader.readLine();
-            if (null == line)
-                break;
-
-            String[] split = line.split(""[\\s,;]+"");
-            for (String s : split) {
-                if (s.length() == 0)
-                    continue;
-                if (!super.currentUser.hasServicePrivilege(s)) {
-                    model.addAttribute(""message"", getMessage(""HaveNoServicePrivilege"", s));
-                    model.addAttribute(""success"", false);
-                    model.addAttribute(""redirect"", ""../weights"");
-                    return ""governance/screen/redirect"";
-                }
-                aimServices.add(s);
-            }
-        }
-
-        for (String aimService : aimServices) {
-            for (String a : addresses) {
-                Weight wt = new Weight();
-                wt.setUsername((String) ((BindingAwareModelMap)model).get(""operator""));
-                wt.setAddress(Tool.getIP(a));
-                wt.setService(aimService);
-                wt.setWeight(w);
-                overrideService.saveOverride(OverrideUtils.weightToOverride(wt));
-            }
-        }
-        model.addAttribute(""success"", true);
-        model.addAttribute(""redirect"", ""../weights"");
-        return ""governance/screen/redirect"";
-    }
-
-    @RequestMapping(""/edit"")
-    public String edit(@RequestParam(""id"") Long id, HttpServletRequest request, HttpServletResponse response, Model model) {
-        prepare(request, response, model, ""edit"", ""weights"");
-        String service = request.getParameter(""service"");
-        String input = request.getParameter(""input"");
-
-        if (service != null && service.length() > 0 && !service.contains(""*"")) {
-            List<Provider> providerList = providerService.findByService(service);
-            List<String> addressList = new ArrayList<String>();
-            for (Provider provider : providerList) {
-                addressList.add(provider.getUrl().split(""://"")[1].split(""/"")[0]);
-            }
-            model.addAttribute(""addressList"", addressList);
-            model.addAttribute(""service"", service);
-            model.addAttribute(""methods"", CollectionUtils.sort(providerService.findMethodsByService(service)));
-        } else {
-            List<String> serviceList = Tool.sortSimpleName(providerService.findServices());
-            model.addAttribute(""serviceList"", serviceList);
-        }
-        if (input != null) model.addAttribute(""input"", input);
-        Weight weight = OverrideUtils.overrideToWeight(overrideService.findById(id));
-        model.addAttribute(""weight"", weight);
-        model.addAttribute(""service"", overrideService.findById(id).getService());
-        return ""governance/screen/weights/edit"";
-    }
-
-    /**
-     * load weight for editing
-     *
-     * @param id
-
-     */
-    @RequestMapping(""/detail"")
-    public String show(@RequestParam(""id"") Long id, HttpServletRequest request, HttpServletResponse response, Model model) {
-        prepare(request, response, model, ""show"", ""weights"");
-        Weight weight = OverrideUtils.overrideToWeight(overrideService.findById(id));
-        model.addAttribute(""weight"", weight);
-        return ""governance/screen/weights/show"";
-    }
-
-    @RequestMapping(value = ""/update"", method = RequestMethod.POST) //post
-    public String update(Weight weight, HttpServletRequest request, HttpServletResponse response, Model model) {
-        prepare(request, response, model, ""update"", ""weights"");
-        boolean success = true;
-        if (!super.currentUser.hasServicePrivilege(weight.getService())) {
-            model.addAttribute(""message"", getMessage(""HaveNoServicePrivilege"", weight.getService()));
-            success = false;
-        } else {
-            weight.setAddress(Tool.getIP(weight.getAddress()));
-            overrideService.updateOverride(OverrideUtils.weightToOverride(weight));
-        }
-        model.addAttribute(""success"", success);
-        model.addAttribute(""redirect"", ""governance/weights"");
-        return ""governance/screen/redirect"";
-    }
-
-    /**
-     * delete
-     *
-     * @param ids
-     * @return
-     */
-    @RequestMapping(""/delete"")
-    public String delete(@RequestParam(""ids"") Long[] ids, HttpServletRequest request, HttpServletResponse response, Model model) {
-        prepare(request, response, model, ""delete"", ""weights"");
-        boolean success = true;
-        for (Long id : ids) {
-            Weight w = OverrideUtils.overrideToWeight(overrideService.findById(id));
-            if (!super.currentUser.hasServicePrivilege(w.getService())) {
-                model.addAttribute(""message"", getMessage(""HaveNoServicePrivilege"", w.getService()));
-                success = false;
-                model.addAttribute(""success"", success);
-                model.addAttribute(""redirect"", ""../../weights"");
-                return ""governance/screen/redirect"";
-            }
-        }
-
-        for (Long id : ids) {
-            overrideService.deleteOverride(id);
-        }
-        model.addAttribute(""success"", success);
-        model.addAttribute(""redirect"", ""../../weights"");
-        return ""governance/screen/redirect"";
-    }
-
-}
+///*
+// * Licensed to the Apache Software Foundation (ASF) under one or more
+// * contributor license agreements.  See the NOTICE file distributed with
+// * this work for additional information regarding copyright ownership.
+// * The ASF licenses this file to You under the Apache License, Version 2.0
+// * (the ""License""); you may not use this file except in compliance with
+// * the License.  You may obtain a copy of the License at
+// *
+// *     http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an ""AS IS"" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package org.apache.dubbo.admin.web.mvc.governance;
+//
+//import com.alibaba.dubbo.common.utils.CollectionUtils;
+//import org.apache.dubbo.admin.governance.service.OverrideService;
+//import org.apache.dubbo.admin.governance.service.ProviderService;
+//import org.apache.dubbo.admin.registry.common.domain.Provider;
+//import org.apache.dubbo.admin.registry.common.domain.Weight;
+//import org.apache.dubbo.admin.registry.common.util.OverrideUtils;
+//import org.apache.dubbo.admin.web.mvc.BaseController;
+//import org.apache.dubbo.admin.web.pulltool.Tool;
+//import org.apache.commons.lang3.StringUtils;
+//import org.apache.commons.lang3.math.NumberUtils;
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.stereotype.Controller;
+//import org.springframework.ui.Model;
+//import org.springframework.validation.support.BindingAwareModelMap;
+//import org.springframework.web.bind.annotation.RequestMapping;
+//import org.springframework.web.bind.annotation.RequestMethod;
+//import org.springframework.web.bind.annotation.RequestParam;
+//
+//import javax.servlet.http.HttpServletRequest;
+//import javax.servlet.http.HttpServletResponse;
+//import java.io.BufferedReader;
+//import java.io.StringReader;
+//import java.util.ArrayList;
+//import java.util.HashSet;
+//import java.util.List;
+//import java.util.Set;
+//import java.util.regex.Pattern;
+//
+///**
+// * ProvidersController.
+// * URI: /services/$service/weights
+// *
+// */
+//@Controller
+//@RequestMapping(""/governance/weights"")
+//public class WeightsController extends BaseController {
+//
+//    private static final Pattern IP_PATTERN = Pattern.compile(""\\d{1,3}(\\.\\d{1,3}){3}$"");
+//    private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(""127(\\.\\d{1,3}){3}$"");
+//    private static final Pattern ALL_IP_PATTERN = Pattern.compile(""0{1,3}(\\.0{1,3}){3}$"");
+//    @Autowired
+//    private OverrideService overrideService;
+//    @Autowired
+//    private ProviderService providerService;
+//
+//    @RequestMapping("""")
+//    public String index(HttpServletRequest request, HttpServletResponse response, Model model) {
+//        prepare(request, response, model, ""index"", ""weights"");
+//        BindingAwareModelMap newModel = (BindingAwareModelMap)model;
+//        String service = (String)newModel.get(""service"");
+//        String address = (String)newModel.get(""address"");
+//        service = StringUtils.trimToNull(service);
+//        address = Tool.getIP(address);
+//        List<Weight> weights;
+//        if (service != null && service.length() > 0) {
+//            weights = OverrideUtils.overridesToWeights(overrideService.findByService(service));
+//        } else if (address != null && address.length() > 0) {
+//            weights = OverrideUtils.overridesToWeights(overrideService.findByAddress(address));
+//        } else {
+//            weights = OverrideUtils.overridesToWeights(overrideService.findAll());
+//        }
+//        model.addAttribute(""weights"", weights);
+//        return ""governance/screen/weights/index"";
+//    }
+//
+//    /**
+//     * load page for the adding
+//     *
+//     */
+//    @RequestMapping(""/add"")
+//    public String add(HttpServletRequest request, HttpServletResponse response, Model model) {
+//        prepare(request, response, model, ""add"", ""weights"");
+//        BindingAwareModelMap newModel = (BindingAwareModelMap)model;
+//        String service = (String)newModel.get(""service"");
+//        String input = request.getParameter(""input"");
+//        if (service != null && service.length() > 0 && !service.contains(""*"")) {
+//            List<Provider> providerList = providerService.findByService(service);
+//            List<String> addressList = new ArrayList<String>();
+//            for (Provider provider : providerList) {
+//                addressList.add(provider.getUrl().split(""://"")[1].split(""/"")[0]);
+//            }
+//            model.addAttribute(""addressList"", addressList);
+//            model.addAttribute(""service"", service);
+//            model.addAttribute(""methods"", CollectionUtils.sort(providerService.findMethodsByService(service)));
+//        } else {
+//            List<String> serviceList = Tool.sortSimpleName(providerService.findServices());
+//            model.addAttribute(""serviceList"", serviceList);
+//        }
+//        if (input != null) model.addAttribute(""input"", input);
+//        return ""governance/screen/weights/add"";
+//    }
+//
+//
+//    @RequestMapping(""/create"")
+//    public String create(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception {
+//        prepare(request, response, model, ""create"", ""weights"");
+//        String addr = request.getParameter(""address"");
+//        String services = request.getParameter(""multiservice"");
+//        if (services == null || services.trim().length() == 0) {
+//            services = request.getParameter(""service"");
+//        }
+//        String weight = request.getParameter(""weight"");
+//
+//        int w = Integer.parseInt(weight);
+//
+//        Set<String> addresses = new HashSet<String>();
+//        BufferedReader reader = new BufferedReader(new StringReader(addr));
+//        while (true) {
+//            String line = reader.readLine();
+//            if (null == line)
+//                break;
+//
+//            String[] split = line.split(""[\\s,;]+"");
+//            for (String s : split) {
+//                if (s.length() == 0)
+//                    continue;
+//
+//                String ip = s;
+//                String port = null;
+//                if (s.indexOf("":"") != -1) {
+//                    ip = s.substring(0, s.indexOf("":""));
+//                    port = s.substring(s.indexOf("":"") + 1, s.length());
+//                    if (port.trim().length() == 0) port = null;
+//                }
+//                if (!IP_PATTERN.matcher(ip).matches()) {
+//                    model.addAttribute(""message"", ""illegal IP: "" + s);
+//                    model.addAttribute(""success"", false);
+//                    model.addAttribute(""redirect"", ""../weights"");
+//                    return ""governance/screen/redirect"";
+//                }
+//                if (LOCAL_IP_PATTERN.matcher(ip).matches() || ALL_IP_PATTERN.matcher(ip).matches()) {
+//                    model.addAttribute(""message"", ""local IP or any host ip is illegal: "" + s);
+//                    model.addAttribute(""success"", false);
+//                    model.addAttribute(""redirect"", ""../weights"");
+//                    return ""governance/screen/redirect"";
+//                }
+//                if (port != null) {
+//                    if (!NumberUtils.isDigits(port)) {
+//                        model.addAttribute(""message"", ""illegal port: "" + s);
+//                        model.addAttribute(""success"", false);
+//                        model.addAttribute(""redirect"", ""../weights"");
+//                        return ""governance/screen/redirect"";
+//                    }
+//                }
+//                addresses.add(s);
+//            }
+//        }
+//
+//        Set<String> aimServices = new HashSet<String>();
+//        reader = new BufferedReader(new StringReader(services));
+//        while (true) {
+//            String line = reader.readLine();
+//            if (null == line)
+//                break;
+//
+//            String[] split = line.split(""[\\s,;]+"");
+//            for (String s : split) {
+//                if (s.length() == 0)
+//                    continue;
+//                if (!super.currentUser.hasServicePrivilege(s)) {
+//                    model.addAttribute(""message"", getMessage(""HaveNoServicePrivilege"", s));
+//                    model.addAttribute(""success"", false);
+//                    model.addAttribute(""redirect"", ""../weights"");
+//                    return ""governance/screen/redirect"";
+//                }
+//                aimServices.add(s);
+//            }
+//        }
+//
+//        for (String aimService : aimServices) {
+//            for (String a : addresses) {
+//                Weight wt = new Weight();
+//                wt.setUsername((String) ((BindingAwareModelMap)model).get(""operator""));
+//                wt.setAddress(Tool.getIP(a));
+//                wt.setService(aimService);
+//                wt.setWeight(w);
+//                overrideService.saveOverride(OverrideUtils.weightToOverride(wt));
+//            }
+//        }
+//        model.addAttribute(""success"", true);
+//        model.addAttribute(""redirect"", ""../weights"");
+//        return ""governance/screen/redirect"";
+//    }
+//
+//    @RequestMapping(""/edit"")
+//    public String edit(@RequestParam(""id"") Long id, HttpServletRequest request, HttpServletResponse response, Model model) {
+//        prepare(request, response, model, ""edit"", ""weights"");
+//        String service = request.getParameter(""service"");
+//        String input = request.getParameter(""input"");
+//
+//        if (service != null && service.length() > 0 && !service.contains(""*"")) {
+//            List<Provider> providerList = providerService.findByService(service);
+//            List<String> addressList = new ArrayList<String>();
+//            for (Provider provider : providerList) {
+//                addressList.add(provider.getUrl().split(""://"")[1].split(""/"")[0]);
+//            }
+//            model.addAttribute(""addressList"", addressList);
+//            model.addAttribute(""service"", service);
+//            model.addAttribute(""methods"", CollectionUtils.sort(providerService.findMethodsByService(service)));
+//        } else {
+//            List<String> serviceList = Tool.sortSimpleName(providerService.findServices());
+//            model.addAttribute(""serviceList"", serviceList);
+//        }
+//        if (input != null) model.addAttribute(""input"", input);
+//        Weight weight = OverrideUtils.overrideToWeight(overrideService.findById(id));
+//        model.addAttribute(""weight"", weight);
+//        model.addAttribute(""service"", overrideService.findById(id).getService());
+//        return ""governance/screen/weights/edit"";
+//    }
+//
+//    /**
+//     * load weight for editing
+//     *
+//     * @param id
+//
+//     */
+//    @RequestMapping(""/detail"")
+//    public String show(@RequestParam(""id"") Long id, HttpServletRequest request, HttpServletResponse response, Model model) {
+//        prepare(request, response, model, ""show"", ""weights"");
+//        Weight weight = OverrideUtils.overrideToWeight(overrideService.findById(id));
+//        model.addAttribute(""weight"", weight);
+//        return ""governance/screen/weights/show"";
+//    }
+//
+//    @RequestMapping(value = ""/update"", method = RequestMethod.POST) //post
+//    public String update(Weight weight, HttpServletRequest request, HttpServletResponse response, Model model) {
+//        prepare(request, response, model, ""update"", ""weights"");
+//        boolean success = true;
+//        if (!super.currentUser.hasServicePrivilege(weight.getService())) {
+//            model.addAttribute(""message"", getMessage(""HaveNoServicePrivilege"", weight.getService()));
+//            success = false;
+//        } else {
+//            weight.setAddress(Tool.getIP(weight.getAddress()));
+//            overrideService.updateOverride(OverrideUtils.weightToOverride(weight));
+//        }
+//        model.addAttribute(""success"", success);
+//        model.addAttribute(""redirect"", ""governance/weights"");
+//        return ""governance/screen/redirect"";
+//    }
+//
+//    /**
+//     * delete
+//     *
+//     * @param ids
+//     * @return
+//     */
+//    @RequestMapping(""/delete"")
+//    public String delete(@RequestParam(""ids"") Long[] ids, HttpServletRequest request, HttpServletResponse response, Model model) {
+//        prepare(request, response, model, ""delete"", ""weights"");
+//        boolean success = true;
+//        for (Long id : ids) {
+//            Weight w = OverrideUtils.overrideToWeight(overrideService.findById(id));
+//            if (!super.currentUser.hasServicePrivilege(w.getService())) {
+//                model.addAttribute(""message"", getMessage(""HaveNoServicePrivilege"", w.getService()));
+//                success = false;
+//                model.addAttribute(""success"", success);
+//                model.addAttribute(""redirect"", ""../../weights"");
+//                return ""governance/screen/redirect"";
+//            }
+//        }
+//
+//        for (Long id : ids) {
+//            overrideService.deleteOverride(id);
+//        }
+//        model.addAttribute(""success"", success);
+//        model.addAttribute(""redirect"", ""../../weights"");
+//        return ""governance/screen/redirect"";
+//    }
+//
+//}
",,9449
3877,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java,995e06b547cb7554c99deb3129fca19b2c35aa8b,1542184312,251,7b0cd34387f8f9507ef7cc60124ee0d2df812d5d,1548388235,257,,,,,"                key = null;",,,9449
3878,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java,82ddf71944e0a6674df1ce9d0e1a134b21a60da7,1549096016,257,,,,,,,,"                key = null;",,,9449
3879,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java,40cc846c8ee1b04bc1fe5c7eb2e5240815330fc1,1549939560,257,,,,,,,,"                key = null;",,,9449
3880,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73e,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/dubbo-admin/dubbo-admin-server/src/test/java/org/apache/dubbo/admin/registry/metadata/impl/ConsulMetaDataCollectorTest.java,0517abc6e95d3e4b6001834e63f7634b74f0ba33,1568880870,60,20b44cd5e9d0485f4a288e0cec972eb3a2eb5486,1593783864,63,,,,,"        consulMetaDataCollector = null;",,,9449
