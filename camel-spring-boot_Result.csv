Detection ID,Latest Commit ID,PMD Version,Rule Name,File Path,Violation Introducing Commit ID,VIC Date,VIC Line Num.,Latest Detection Commit ID,LDC ID Date,LDC Line Num.,Violation Fixed Commit ID,VFC Date,VFC Line Num.,Fixed Period(day),Original Code,Fixed Code,Really Fixed?,Time
1,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/queue/QueueEndpoint.java,4c88aa6af568b5c0594e80e089cbd08a12aa7d8f,1174369464,113,160d9af7be83c6de8791c86dac799a1f4a055a09,1174400518,114,,,,,"			activation=null;",,,712
2,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/component/queue/QueueEndpoint.java,3f90f9286e6d5eb4d344334c9690e3790a4fb544,1174499627,114,c210132b9219522267adbc0142957ee5a76aeb67,1174912309,114,,,,,"			activation=null;",,,712
3,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/builder/xpath/XPathBuilder.java,95ceac0508209134eb6b9d6141c5bdce145e490b,1174652140,276,17a673f2694805db8f00fe518ce12585dd982829,1177408482,285,,,,,"        xpathFactory = null;",,,712
4,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java,85d7a943d131caba64f097163f59759be101ba5c,1174987852,44,90f0194d184a435b766508a5a298c3dc12414382,1183391396,47,,,,,"                producer = null;",,,712
5,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,39d9e677eccdf11102e276834eec9a9ba4e52196,1175006808,112,,,,,,,,"        destMessage = null;",,,712
6,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,39d9e677eccdf11102e276834eec9a9ba4e52196,1175006808,113,,,,,,,,"        inMessage = null;",,,712
7,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,39d9e677eccdf11102e276834eec9a9ba4e52196,1175006808,205,,,,,,,,"        inMessage = null;",,,712
8,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,39d9e677eccdf11102e276834eec9a9ba4e52196,1175006808,256,,,,,,,,"        inMessage = null;",,,712
9,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/util/URISupport.java,bc318a8cb3d8c7ef73b21170e000537e01824cee,1175029430,281,56a2b66a5580f3c427fa436fba6f4a1eef5dac35,1175622401,280,32a32c0725707e193039aa9f73f1eb9080cfd526,1181672413,-1,1181672413/1175029430,"            s = null;","-/**
- *
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.camel.util;
-
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URLDecoder;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-/**
- * @version $Revision$
- */
-public class URISupport {
-    public static class CompositeData {
-        String scheme;
-        String path;
-        URI components[];
-        Map parameters;
-        String fragment;
-        public String host;
-
-        public URI[] getComponents() {
-            return components;
-        }
-
-        public String getFragment() {
-            return fragment;
-        }
-
-        public Map getParameters() {
-            return parameters;
-        }
-
-        public String getScheme() {
-            return scheme;
-        }
-
-        public String getPath() {
-            return path;
-        }
-
-        public String getHost() {
-            return host;
-        }
-
-        public URI toURI() throws URISyntaxException {
-            StringBuffer sb = new StringBuffer();
-            if (scheme != null) {
-                sb.append(scheme);
-                sb.append(':');
-            }
-
-            if (host != null && host.length() != 0) {
-                sb.append(host);
-            }
-            else {
-                sb.append('(');
-                for (int i = 0; i < components.length; i++) {
-                    if (i != 0) {
-                        sb.append(',');
-                    }
-                    sb.append(components[i].toString());
-                }
-                sb.append(')');
-            }
-
-            if (path != null) {
-                sb.append('/');
-                sb.append(path);
-            }
-            if (!parameters.isEmpty()) {
-                sb.append(""?"");
-                sb.append(createQueryString(parameters));
-            }
-            if (fragment != null) {
-                sb.append(""#"");
-                sb.append(fragment);
-            }
-            return new URI(sb.toString());
-        }
-    }
-
-    public static Map parseQuery(String uri) throws URISyntaxException {
-        try {
-            Map rc = new HashMap();
-            if (uri != null) {
-                String[] parameters = uri.split(""&"");
-                for (int i = 0; i < parameters.length; i++) {
-                    int p = parameters[i].indexOf(""="");
-                    if (p >= 0) {
-                        String name = URLDecoder.decode(parameters[i].substring(0, p), ""UTF-8"");
-                        String value = URLDecoder.decode(parameters[i].substring(p + 1), ""UTF-8"");
-                        rc.put(name, value);
-                    }
-                    else {
-                        rc.put(parameters[i], null);
-                    }
-                }
-            }
-            return rc;
-        }
-        catch (UnsupportedEncodingException e) {
-            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
-        }
-    }
-
-    public static Map parseParamters(URI uri) throws URISyntaxException {
-        String query = uri.getQuery();
-        if (query == null) {
-            String schemeSpecificPart = uri.getSchemeSpecificPart();
-            int idx = schemeSpecificPart.lastIndexOf('?');
-            if (idx < 0) {
-                return Collections.EMPTY_MAP;
-            }
-            else {
-                query = schemeSpecificPart.substring(idx + 1);
-            }
-        }
-        else {
-            query = stripPrefix(query, ""?"");
-        }
-        return parseQuery(query);
-    }
-
-    /**
-     * Removes any URI query from the given uri
-     */
-    public static URI removeQuery(URI uri) throws URISyntaxException {
-        return createURIWithQuery(uri, null);
-    }
-
-    /**
-     * Creates a URI with the given query
-     */
-    public static URI createURIWithQuery(URI uri, String query) throws URISyntaxException {
-        return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), query, uri.getFragment());
-    }
-
-    public static CompositeData parseComposite(URI uri) throws URISyntaxException {
-
-        CompositeData rc = new CompositeData();
-        rc.scheme = uri.getScheme();
-        String ssp = stripPrefix(uri.getSchemeSpecificPart().trim(), ""//"").trim();
-
-        parseComposite(uri, rc, ssp);
-
-        rc.fragment = uri.getFragment();
-        return rc;
-    }
-
-    /**
-     * @param uri
-     * @param rc
-     * @param ssp
-     * @throws URISyntaxException
-     */
-    private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException {
-        String componentString;
-        String params;
-
-        if (!checkParenthesis(ssp)) {
-            throw new URISyntaxException(uri.toString(), ""Not a matching number of '(' and ')' parenthesis"");
-        }
-
-        int p;
-        int intialParen = ssp.indexOf(""("");
-        if (intialParen == 0) {
-            rc.host = ssp.substring(0, intialParen);
-            p = rc.host.indexOf(""/"");
-            if (p >= 0) {
-                rc.path = rc.host.substring(p);
-                rc.host = rc.host.substring(0, p);
-            }
-            p = ssp.lastIndexOf("")"");
-            componentString = ssp.substring(intialParen + 1, p);
-            params = ssp.substring(p + 1).trim();
-        }
-        else {
-            componentString = ssp;
-            params = """";
-        }
-
-        String components[] = splitComponents(componentString);
-        rc.components = new URI[components.length];
-        for (int i = 0; i < components.length; i++) {
-            rc.components[i] = new URI(components[i].trim());
-        }
-
-        p = params.indexOf(""?"");
-        if (p >= 0) {
-            if (p > 0) {
-                rc.path = stripPrefix(params.substring(0, p), ""/"");
-            }
-            rc.parameters = parseQuery(params.substring(p + 1));
-        }
-        else {
-            if (params.length() > 0) {
-                rc.path = stripPrefix(params, ""/"");
-            }
-            rc.parameters = Collections.EMPTY_MAP;
-        }
-    }
-
-    /**
-     * @param str
-     * @return
-     */
-    private static String[] splitComponents(String str) {
-        ArrayList l = new ArrayList();
-
-        int last = 0;
-        int depth = 0;
-        char chars[] = str.toCharArray();
-        for (int i = 0; i < chars.length; i++) {
-            switch (chars[i]) {
-                case '(':
-                    depth++;
-                    break;
-                case ')':
-                    depth--;
-                    break;
-                case ',':
-                    if (depth == 0) {
-                        String s = str.substring(last, i);
-                        l.add(s);
-                        last = i + 1;
-                    }
-            }
-        }
-
-        String s = str.substring(last);
-        if (s.length() != 0) {
-            l.add(s);
-        }
-
-        String rc[] = new String[l.size()];
-        l.toArray(rc);
-        return rc;
-    }
-
-    public static String stripPrefix(String value, String prefix) {
-        if (value.startsWith(prefix)) {
-            return value.substring(prefix.length());
-        }
-        return value;
-    }
-
-    public static URI stripScheme(URI uri) throws URISyntaxException {
-        return new URI(stripPrefix(uri.getSchemeSpecificPart().trim(), ""//""));
-    }
-
-    public static String createQueryString(Map options) throws URISyntaxException {
-        try {
-            if (options.size() > 0) {
-                StringBuffer rc = new StringBuffer();
-                boolean first = true;
-                for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
-                    if (first) {
-                        first = false;
-                    }
-                    else {
-                        rc.append(""&"");
-                    }
-
-                    String key = (String) iter.next();
-                    String value = (String) options.get(key);
-                    rc.append(URLEncoder.encode(key, ""UTF-8""));
-                    rc.append(""="");
-                    rc.append(URLEncoder.encode(value, ""UTF-8""));
-                }
-                return rc.toString();
-            }
-            else {
-                return """";
-            }
-        }
-        catch (UnsupportedEncodingException e) {
-            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
-        }
-    }
-
-    /**
-     * Creates a URI from the original URI and the remaining paramaters
-     *
-     * @throws URISyntaxException
-     */
-    public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
-        String s = createQueryString(params);
-        if (s.length() == 0) {
-            s = null;
-        }
-        return createURIWithQuery(originalURI, s);
-    }
-
-    static public URI changeScheme(URI bindAddr, String scheme) throws URISyntaxException {
-        return new URI(scheme, bindAddr.getUserInfo(), bindAddr.getHost(), bindAddr.getPort(), bindAddr.getPath(), bindAddr.getQuery(), bindAddr.getFragment());
-    }
-
-    public static boolean checkParenthesis(String str) {
-        boolean result = true;
-        if (str != null) {
-            int open = 0;
-            int closed = 0;
-
-            int i = 0;
-            while ((i = str.indexOf('(', i)) >= 0) {
-                i++;
-                open++;
-            }
-            i = 0;
-            while ((i = str.indexOf(')', i)) >= 0) {
-                i++;
-                closed++;
-            }
-            result = open == closed;
-        }
-        return result;
-    }
-
-    public int indexOfParenthesisMatch(String str) {
-        int result = -1;
-
-        return result;
-    }
-}
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.util;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URLDecoder;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * @version $Revision$
+ */
+public class URISupport {
+    public static class CompositeData {
+        String scheme;
+        String path;
+        URI components[];
+        Map parameters;
+        String fragment;
+        public String host;
+
+        public URI[] getComponents() {
+            return components;
+        }
+
+        public String getFragment() {
+            return fragment;
+        }
+
+        public Map getParameters() {
+            return parameters;
+        }
+
+        public String getScheme() {
+            return scheme;
+        }
+
+        public String getPath() {
+            return path;
+        }
+
+        public String getHost() {
+            return host;
+        }
+
+        public URI toURI() throws URISyntaxException {
+            StringBuffer sb = new StringBuffer();
+            if (scheme != null) {
+                sb.append(scheme);
+                sb.append(':');
+            }
+
+            if (host != null && host.length() != 0) {
+                sb.append(host);
+            }
+            else {
+                sb.append('(');
+                for (int i = 0; i < components.length; i++) {
+                    if (i != 0) {
+                        sb.append(',');
+                    }
+                    sb.append(components[i].toString());
+                }
+                sb.append(')');
+            }
+
+            if (path != null) {
+                sb.append('/');
+                sb.append(path);
+            }
+            if (!parameters.isEmpty()) {
+                sb.append(""?"");
+                sb.append(createQueryString(parameters));
+            }
+            if (fragment != null) {
+                sb.append(""#"");
+                sb.append(fragment);
+            }
+            return new URI(sb.toString());
+        }
+    }
+
+    public static Map parseQuery(String uri) throws URISyntaxException {
+        try {
+            Map rc = new HashMap();
+            if (uri != null) {
+                String[] parameters = uri.split(""&"");
+                for (int i = 0; i < parameters.length; i++) {
+                    int p = parameters[i].indexOf(""="");
+                    if (p >= 0) {
+                        String name = URLDecoder.decode(parameters[i].substring(0, p), ""UTF-8"");
+                        String value = URLDecoder.decode(parameters[i].substring(p + 1), ""UTF-8"");
+                        rc.put(name, value);
+                    }
+                    else {
+                        rc.put(parameters[i], null);
+                    }
+                }
+            }
+            return rc;
+        }
+        catch (UnsupportedEncodingException e) {
+            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
+        }
+    }
+
+    public static Map parseParamters(URI uri) throws URISyntaxException {
+        String query = uri.getQuery();
+        if (query == null) {
+            String schemeSpecificPart = uri.getSchemeSpecificPart();
+            int idx = schemeSpecificPart.lastIndexOf('?');
+            if (idx < 0) {
+                return Collections.EMPTY_MAP;
+            }
+            else {
+                query = schemeSpecificPart.substring(idx + 1);
+            }
+        }
+        else {
+            query = stripPrefix(query, ""?"");
+        }
+        return parseQuery(query);
+    }
+
+    /**
+     * Removes any URI query from the given uri
+     */
+    public static URI removeQuery(URI uri) throws URISyntaxException {
+        return createURIWithQuery(uri, null);
+    }
+
+    /**
+     * Creates a URI with the given query
+     */
+    public static URI createURIWithQuery(URI uri, String query) throws URISyntaxException {
+        return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), query, uri.getFragment());
+    }
+
+    public static CompositeData parseComposite(URI uri) throws URISyntaxException {
+
+        CompositeData rc = new CompositeData();
+        rc.scheme = uri.getScheme();
+        String ssp = stripPrefix(uri.getSchemeSpecificPart().trim(), ""//"").trim();
+
+        parseComposite(uri, rc, ssp);
+
+        rc.fragment = uri.getFragment();
+        return rc;
+    }
+
+    /**
+     * @param uri
+     * @param rc
+     * @param ssp
+     * @throws URISyntaxException
+     */
+    private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException {
+        String componentString;
+        String params;
+
+        if (!checkParenthesis(ssp)) {
+            throw new URISyntaxException(uri.toString(), ""Not a matching number of '(' and ')' parenthesis"");
+        }
+
+        int p;
+        int intialParen = ssp.indexOf(""("");
+        if (intialParen == 0) {
+            rc.host = ssp.substring(0, intialParen);
+            p = rc.host.indexOf(""/"");
+            if (p >= 0) {
+                rc.path = rc.host.substring(p);
+                rc.host = rc.host.substring(0, p);
+            }
+            p = ssp.lastIndexOf("")"");
+            componentString = ssp.substring(intialParen + 1, p);
+            params = ssp.substring(p + 1).trim();
+        }
+        else {
+            componentString = ssp;
+            params = """";
+        }
+
+        String components[] = splitComponents(componentString);
+        rc.components = new URI[components.length];
+        for (int i = 0; i < components.length; i++) {
+            rc.components[i] = new URI(components[i].trim());
+        }
+
+        p = params.indexOf(""?"");
+        if (p >= 0) {
+            if (p > 0) {
+                rc.path = stripPrefix(params.substring(0, p), ""/"");
+            }
+            rc.parameters = parseQuery(params.substring(p + 1));
+        }
+        else {
+            if (params.length() > 0) {
+                rc.path = stripPrefix(params, ""/"");
+            }
+            rc.parameters = Collections.EMPTY_MAP;
+        }
+    }
+
+    /**
+     * @param str
+     * @return
+     */
+    private static String[] splitComponents(String str) {
+        ArrayList l = new ArrayList();
+
+        int last = 0;
+        int depth = 0;
+        char chars[] = str.toCharArray();
+        for (int i = 0; i < chars.length; i++) {
+            switch (chars[i]) {
+                case '(':
+                    depth++;
+                    break;
+                case ')':
+                    depth--;
+                    break;
+                case ',':
+                    if (depth == 0) {
+                        String s = str.substring(last, i);
+                        l.add(s);
+                        last = i + 1;
+                    }
+            }
+        }
+
+        String s = str.substring(last);
+        if (s.length() != 0) {
+            l.add(s);
+        }
+
+        String rc[] = new String[l.size()];
+        l.toArray(rc);
+        return rc;
+    }
+
+    public static String stripPrefix(String value, String prefix) {
+        if (value.startsWith(prefix)) {
+            return value.substring(prefix.length());
+        }
+        return value;
+    }
+
+    public static URI stripScheme(URI uri) throws URISyntaxException {
+        return new URI(stripPrefix(uri.getSchemeSpecificPart().trim(), ""//""));
+    }
+
+    public static String createQueryString(Map options) throws URISyntaxException {
+        try {
+            if (options.size() > 0) {
+                StringBuffer rc = new StringBuffer();
+                boolean first = true;
+                for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
+                    if (first) {
+                        first = false;
+                    }
+                    else {
+                        rc.append(""&"");
+                    }
+
+                    String key = (String) iter.next();
+                    String value = (String) options.get(key);
+                    rc.append(URLEncoder.encode(key, ""UTF-8""));
+                    rc.append(""="");
+                    rc.append(URLEncoder.encode(value, ""UTF-8""));
+                }
+                return rc.toString();
+            }
+            else {
+                return """";
+            }
+        }
+        catch (UnsupportedEncodingException e) {
+            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
+        }
+    }
+
+    /**
+     * Creates a URI from the original URI and the remaining paramaters
+     *
+     * @throws URISyntaxException
+     */
+    public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
+        String s = createQueryString(params);
+        if (s.length() == 0) {
+            s = null;
+        }
+        return createURIWithQuery(originalURI, s);
+    }
+
+    static public URI changeScheme(URI bindAddr, String scheme) throws URISyntaxException {
+        return new URI(scheme, bindAddr.getUserInfo(), bindAddr.getHost(), bindAddr.getPort(), bindAddr.getPath(), bindAddr.getQuery(), bindAddr.getFragment());
+    }
+
+    public static boolean checkParenthesis(String str) {
+        boolean result = true;
+        if (str != null) {
+            int open = 0;
+            int closed = 0;
+
+            int i = 0;
+            while ((i = str.indexOf('(', i)) >= 0) {
+                i++;
+                open++;
+            }
+            i = 0;
+            while ((i = str.indexOf(')', i)) >= 0) {
+                i++;
+                closed++;
+            }
+            result = open == closed;
+        }
+        return result;
+    }
+
+    public int indexOfParenthesisMatch(String str) {
+        int result = -1;
+
+        return result;
+    }
+}
",,712
10,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java,f5b93e1462dc2e3790b8cddc8c608bb0047f185a,1175250128,83,a6cbe8419351fcd8d26f1660dd4b112a7cd64e0b,1178036617,76,,,,,"            chat = null;",,,712
11,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,f5b93e1462dc2e3790b8cddc8c608bb0047f185a,1175250128,83,a6cbe8419351fcd8d26f1660dd4b112a7cd64e0b,1178036617,76,,,,,"        chat = null;",,,712
12,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java,8a83d7402cf28d8ab94f305ab01363eeda1e1d3c,1175594101,128,86ca7c4109d041de811594d3a744f8d8d3c4517d,1175601512,135,,,,,"            transaction = null;",,,712
13,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java,86ca7c4109d041de811594d3a744f8d8d3c4517d,1175601512,72,a0cf201c91b645c7a42993c19361bfc72dd829ad,1175603500,75,bbf92a4425a790dcf44b992a8499cb03e4640ff1,1175615325,-1,1175615325/1175601512,"            transaction = null;","      */
     public synchronized void run() {
         log.debug(""Starting to poll for new database entities to process"");
-        transaction = entityManager.getTransaction();
-        transaction.begin();
-
         try {
-            Query query = getQueryFactory().createQuery(this);
-            configureParameters(query);
-            List results = query.getResultList();
-            for (Object result : results) {
-                if (log.isDebugEnabled()) {
-                    log.debug(""Processing new entity: "" + result);
-                }
+            template.execute(new JpaCallback() {
+                public Object doInJpa(EntityManager entityManager) throws PersistenceException {
+                    Query query = getQueryFactory().createQuery(entityManager);
+                    configureParameters(query);
+                    List results = query.getResultList();
+                    for (Object result : results) {
+                        if (log.isDebugEnabled()) {
+                            log.debug(""Processing new entity: "" + result);
+                        }
 
-                if (lockEntity(result)) {
-                    // lets turn the result into an exchange and fire it into the processor
-                    Exchange exchange = createExchange(result);
-                    getProcessor().onExchange(exchange);
-                    getDeleteHandler().deleteObject(this, result);
+                        if (lockEntity(result, entityManager)) {
+                            // lets turn the result into an exchange and fire it into the processor
+                            Exchange exchange = createExchange(result);
+                            getProcessor().onExchange(exchange);
+                            getDeleteHandler().deleteObject(entityManager, result);
+                        }
+                    }
+                    return null;
                 }
-            }
-
-            transaction.commit();
-            transaction = null;
+            });
         }
         catch (RuntimeException e) {
             log.warn(""Caught: "" + e, e);
-            if (transaction != null) {
-                transaction.rollback();
-            }
         }
     }
 
     // Properties
     //-------------------------------------------------------------------------
-
-    public EntityManager getEntityManager() {
-        return entityManager;
-    }
-
     public JpaEndpoint getEndpoint() {
         return endpoint;
     }
",,712
14,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java,86ca7c4109d041de811594d3a744f8d8d3c4517d,1175601512,83,,,,bbf92a4425a790dcf44b992a8499cb03e4640ff1,1175615325,-1,1175615325/1175601512,"        transaction = null;","         });
 
         // now lets assert that there is a result
-        transaction.begin();
-        results = entityManager.createQuery(queryText).getResultList();
+        results = template.find(queryText);
         assertEquals(""Should have no results: "" + results, 1, results.size());
         SendEmail mail = (SendEmail) results.get(0);
         assertEquals(""address property"", ""foo@bar.com"", mail.getAddress());
-        transaction.commit();
-        transaction = null;
 
         // now lets create a consumer to consume it
         consumer = endpoint.createConsumer(new Processor<Exchange>() {
",,712
15,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-saxon/src/main/java/org/apache/camel/builder/saxon/XQueryBuilder.java,05e1e3e74a1f30310679148aae80c99a062e924b,1175791908,308,5bd7e538f88508f6512bf9a2a6e776717021f8fa,1175793050,308,,,,,"        staticQueryContext = null;",,,712
16,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-saxon/src/main/java/org/apache/camel/builder/saxon/XQueryBuilder.java,05e1e3e74a1f30310679148aae80c99a062e924b,1175791908,309,5bd7e538f88508f6512bf9a2a6e776717021f8fa,1175793050,309,,,,,"        configuration = null;",,,712
17,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfInvokeConsumer.java,0b472529392bb78e3a5ee3cdc394828c3bde8d38,1175793582,63,a6cbe8419351fcd8d26f1660dd4b112a7cd64e0b,1178036617,63,,,,,"            server = null;",,,712
18,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfInvokeProducer.java,0b472529392bb78e3a5ee3cdc394828c3bde8d38,1175793582,74,102f51e3a6e8e4b624209f64c6c45d19319edc24,1178038724,81,,,,,"            client = null;",,,712
19,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-eclipse/camel.routing.editor/src/org/apache/camel/eclipse/camelEditorPlugin.java,f4aa5871cb91ae864b07d8a2f363c8971d451cf1,1175794354,24,,,,,,,,"      plugin = null;",,,712
20,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,35c685c13f736cc5582d77968b7c56d2d244c854,1176990608,101,,,,,,,,"            latch = null;",,,712
21,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,006e9bba7e2d2f80daaae1173484a647a9ac8843,1176993561,144,cb5cae61ce5e14b9634d98bad3d55af3fcc05de2,1183639163,192,,,,,"            latch = null;",,,712
22,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-saxon/src/main/java/org/apache/camel/builder/saxon/XQueryBuilder.java,17a673f2694805db8f00fe518ce12585dd982829,1177408482,325,66a657e52a11da2aecd05216fc344626d6bcda50,1178024795,330,,,,,"        staticQueryContext = null;",,,712
23,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-saxon/src/main/java/org/apache/camel/builder/saxon/XQueryBuilder.java,17a673f2694805db8f00fe518ce12585dd982829,1177408482,326,66a657e52a11da2aecd05216fc344626d6bcda50,1178024795,331,,,,,"        configuration = null;",,,712
24,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,efa26e457085bcb67e40edaa0bedca462ee8e24a,1177436262,159,cb5cae61ce5e14b9634d98bad3d55af3fcc05de2,1183639163,207,,,,,"            latch = null;",,,712
25,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java,cf4338d140e6778409dd57960a3210c3d8d049df,1177604029,525,,,,,,,,"		this.acknowledgementModeName=null;",,,712
26,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,d5a1ccbb542bd89f6e76297887caff2c9e48f9f7,1178025280,284,2032831a9d33ba96ea851c254de70db461ee4fc5,1178213743,289,,,,,"        xpathFactory = null;",,,712
27,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiConsumer.java,a6aa7819dd46bb4d04bb16f99887d521812424aa,1178027853,68,a6cbe8419351fcd8d26f1660dd4b112a7cd64e0b,1178036617,68,,,,,"			stub=null;",,,712
28,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-spring/src/test/java/org/apache/camel/spring/xml/XmlRouteBuilderTest.java,cca5cdc45ee0ed6e10825f87c78647780e9081a8,1178192130,50,,,,,,,,"            applicationContext = null;",,,712
29,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-bam/src/main/java/org/apache/camel/bam/TimerEngine.java,831380571a9045b69c0b02266d46bda1577db632,1179213291,88,,,,,,,,"            thread = null;",,,712
30,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-bam/src/main/java/org/apache/camel/bam/ActivityMonitorEngine.java,2cbbb2f6bff90c8210adb77a7185e8c31cd714df,1179337511,118,,,,,,,,"            thread = null;",,,712
31,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-bam/src/main/java/org/apache/camel/bam/ActivityMonitorEngine.java,4e3c91403e843e101691aaed234bda8b5813a28f,1179408503,130,,,,,,,,"            thread = null;",,,712
32,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-bam/src/main/java/org/apache/camel/bam/processor/ActivityMonitorEngine.java,74fe7f58f64ed5ab6e15184b2fb8e29011c64738,1179410137,131,59bcdde7c278c552a4e500182e82680d0ac19ff4,1179413929,137,,,,,"            thread = null;",,,712
33,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-bam/src/main/java/org/apache/camel/bam/processor/ActivityMonitorEngine.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,137,,,,,,,,"            thread = null;",,,712
34,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfInvokeConsumer.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,63,,,,,,,,"            server = null;",,,712
35,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfInvokeProducer.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,81,90f0194d184a435b766508a5a298c3dc12414382,1183391396,84,,,,,"            client = null;",,,712
36,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,112,,,,,,,,"        destMessage = null;",,,712
37,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,113,,,,,,,,"        inMessage = null;",,,712
38,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,205,,,,,,,,"        inMessage = null;",,,712
39,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,256,,,,,,,,"        inMessage = null;",,,712
40,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,525,,,,,,,,"		this.acknowledgementModeName=null;",,,712
41,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiConsumer.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,68,32a32c0725707e193039aa9f73f1eb9080cfd526,1181672413,68,,,,,"			stub=null;",,,712
42,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-saxon/src/main/java/org/apache/camel/builder/saxon/XQueryBuilder.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,330,,,,,,,,"        staticQueryContext = null;",,,712
43,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-saxon/src/main/java/org/apache/camel/builder/saxon/XQueryBuilder.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,331,,,,,,,,"        configuration = null;",,,712
44,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,76,,,,,,,,"            chat = null;",,,712
45,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,76,,,,,,,,"        chat = null;",,,712
46,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/tooling/camel-eclipse/camel.routing.editor/src/org/apache/camel/eclipse/camelEditorPlugin.java,645d9a7a1027ea4efecdaff4ad127333666baab4,1179416274,24,,,,32a32c0725707e193039aa9f73f1eb9080cfd526,1181672413,-1,1181672413/1179416274,"      plugin = null;","-package org.apache.camel.eclipse;
-
-import org.openarchitectureware.xtext.AbstractXtextEditorPlugin;
-import org.openarchitectureware.xtext.LanguageUtilities;
-import org.osgi.framework.BundleContext;
-
-public class camelEditorPlugin extends AbstractXtextEditorPlugin {
-   private static camelEditorPlugin plugin;
-   public static camelEditorPlugin getDefault() {
-      return plugin;
-   }
-
-   private camelUtilities utilities = new camelUtilities();
-   public LanguageUtilities getUtilities() {
-      return utilities;
-   }
-
-   public camelEditorPlugin() {
-      plugin = this;
-   }
-
-   public void stop(BundleContext context) throws Exception {
-      super.stop(context);
-      plugin = null;
-   }
-}
+package org.apache.camel.eclipse;
+
+import org.openarchitectureware.xtext.AbstractXtextEditorPlugin;
+import org.openarchitectureware.xtext.LanguageUtilities;
+import org.osgi.framework.BundleContext;
+
+public class camelEditorPlugin extends AbstractXtextEditorPlugin {
+   private static camelEditorPlugin plugin;
+   public static camelEditorPlugin getDefault() {
+      return plugin;
+   }
+
+   private camelUtilities utilities = new camelUtilities();
+   public LanguageUtilities getUtilities() {
+      return utilities;
+   }
+
+   public camelEditorPlugin() {
+      plugin = this;
+   }
+
+   public void stop(BundleContext context) throws Exception {
+      super.stop(context);
+      plugin = null;
+   }
+}
",,712
47,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java,23af79362a3628bc40986e30241c18ff2f2c1c67,1179835348,555,2d7af3e17d5c33f79890cc7993b37da1b7d60fc9,1181208395,564,,,,,"        this.acknowledgementModeName = null;",,,712
48,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/impl/DefaultPullConsumer.java,4ebb6cb4f924465cae73292b4db28a7eeee5beae,1180020420,109,,,,,,,,"                consumer = null;",,,712
49,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/impl/DefaultPollingConsumer.java,0d55956ab27b72fa1e7485699a59a5e9d8b1ed62,1180021550,109,,,,,,,,"                consumer = null;",,,712
50,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/processor/Resequencer.java,ae03d68cc221c69f230c65787286435d3096e67c,1180107577,154,ae9a02a3fe78c5968d0c7a70d614908ef03d4dc0,1181195765,160,b49154101a82f12dbcbdfe8447009c3d8624d050,1183472183,-1,1183472183/1180107577,"        consumer = null;","         this(endpoint, processor, createSet(expressions));
     }
 
-    public Resequencer(Endpoint endpoint, Processor processor, Set<Exchange> set) {
-        this.endpoint = endpoint;
-        this.processor = processor;
-        this.set = set;
+    public Resequencer(Endpoint endpoint, Processor processor, Set<Exchange> collection) {
+        super(endpoint, processor, collection);
     }
 
     @Override
     public String toString() {
-        return ""Resequencer[to: "" + processor + ""]"";
-    }
-
-    public void run() {
-        log.debug(""Starting thread for "" + this);
-        while (!isStopped() && !isStopping()) {
-            try {
-                processBatch();
-            }
-            catch (Exception e) {
-                getExceptionHandler().handleException(e);
-            }
-        }
-        set.clear();
-    }
-
-    // Properties
-    //-------------------------------------------------------------------------
-    public ExceptionHandler getExceptionHandler() {
-        if (exceptionHandler == null) {
-            exceptionHandler = new LoggingExceptionHandler(getClass());
-        }
-        return exceptionHandler;
-    }
-
-    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
-        this.exceptionHandler = exceptionHandler;
-    }
-
-    public int getBatchSize() {
-        return batchSize;
-    }
-
-    public void setBatchSize(int batchSize) {
-        this.batchSize = batchSize;
-    }
-
-    public long getBatchTimeout() {
-        return batchTimeout;
-    }
-
-    public void setBatchTimeout(long batchTimeout) {
-        this.batchTimeout = batchTimeout;
+        return ""Resequencer[to: "" + getProcessor() + ""]"";
     }
 
     // Implementation methods
     //-------------------------------------------------------------------------
 
-    /**
-     * A transactional method to process a batch of messages up to a timeout period
-     * or number of messages reached.
-     */
-    protected synchronized void processBatch() throws Exception {
-        long start = System.currentTimeMillis();
-        long end = start + batchTimeout;
-        for (int i = 0; i < batchSize; i++) {
-            long timeout = end - System.currentTimeMillis();
-
-            Exchange exchange = consumer.receive(timeout);
-            if (exchange == null) {
-                break;
-            }
-            set.add(exchange);
-        }
-
-        if (log.isDebugEnabled()) {
-            log.debug(""Finsihed batch size: "" + batchSize + "" timeout: "" + batchTimeout + "" so sending set: "" + set);
-        }
-
-        // lets send the batch
-        Iterator<Exchange> iter = set.iterator();
-        while (iter.hasNext()) {
-            Exchange exchange = iter.next();
-            iter.remove();
-            processor.process(exchange);
-        }
-    }
-
-    protected void doStart() throws Exception {
-        consumer = endpoint.createPollingConsumer();
-
-        ServiceHelper.startServices(processor, consumer);
-
-        Thread thread = new Thread(this, this + "" Polling Thread"");
-        thread.start();
-    }
-
-    protected void doStop() throws Exception {
-        ServiceHelper.stopServices(consumer, processor);
-        consumer = null;
-    }
-
     protected static Set<Exchange> createSet(Expression<Exchange> expression) {
         return createSet(new ExpressionComparator<Exchange>(expression));
     }
",,712
51,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/util/URISupport.java,5dd03154eee5102b86bc9cc7f8fd3111f8d460f7,1181205794,311,,,,32a32c0725707e193039aa9f73f1eb9080cfd526,1181672413,-1,1181672413/1181205794,"            s = null;","-/**
- *
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.camel.util;
-
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URLDecoder;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-/**
- * @version $Revision$
- */
-public class URISupport {
-    public static class CompositeData {
-        String scheme;
-        String path;
-        URI components[];
-        Map parameters;
-        String fragment;
-        public String host;
-
-        public URI[] getComponents() {
-            return components;
-        }
-
-        public String getFragment() {
-            return fragment;
-        }
-
-        public Map getParameters() {
-            return parameters;
-        }
-
-        public String getScheme() {
-            return scheme;
-        }
-
-        public String getPath() {
-            return path;
-        }
-
-        public String getHost() {
-            return host;
-        }
-
-        public URI toURI() throws URISyntaxException {
-            StringBuffer sb = new StringBuffer();
-            if (scheme != null) {
-                sb.append(scheme);
-                sb.append(':');
-            }
-
-            if (host != null && host.length() != 0) {
-                sb.append(host);
-            }
-            else {
-                sb.append('(');
-                for (int i = 0; i < components.length; i++) {
-                    if (i != 0) {
-                        sb.append(',');
-                    }
-                    sb.append(components[i].toString());
-                }
-                sb.append(')');
-            }
-
-            if (path != null) {
-                sb.append('/');
-                sb.append(path);
-            }
-            if (!parameters.isEmpty()) {
-                sb.append(""?"");
-                sb.append(createQueryString(parameters));
-            }
-            if (fragment != null) {
-                sb.append(""#"");
-                sb.append(fragment);
-            }
-            return new URI(sb.toString());
-        }
-    }
-
-    public static Map parseQuery(String uri) throws URISyntaxException {
-        try {
-            Map rc = new HashMap();
-            if (uri != null) {
-                String[] parameters = uri.split(""&"");
-                for (int i = 0; i < parameters.length; i++) {
-                    int p = parameters[i].indexOf(""="");
-                    if (p >= 0) {
-                        String name = URLDecoder.decode(parameters[i].substring(0, p), ""UTF-8"");
-                        String value = URLDecoder.decode(parameters[i].substring(p + 1), ""UTF-8"");
-                        rc.put(name, value);
-                    }
-                    else {
-                        rc.put(parameters[i], null);
-                    }
-                }
-            }
-            return rc;
-        }
-        catch (UnsupportedEncodingException e) {
-            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
-        }
-    }
-
-    public static Map parseParamters(URI uri) throws URISyntaxException {
-        String query = uri.getQuery();
-        if (query == null) {
-            String schemeSpecificPart = uri.getSchemeSpecificPart();
-            int idx = schemeSpecificPart.lastIndexOf('?');
-            if (idx < 0) {
-                return Collections.EMPTY_MAP;
-            }
-            else {
-                query = schemeSpecificPart.substring(idx + 1);
-            }
-        }
-        else {
-            query = stripPrefix(query, ""?"");
-        }
-        return parseQuery(query);
-    }
-
-    /**
-     * Removes any URI query from the given uri
-     */
-    public static URI removeQuery(URI uri) throws URISyntaxException {
-        return createURIWithQuery(uri, null);
-    }
-
-    /**
-     * Creates a URI with the given query
-     */
-    public static URI createURIWithQuery(URI uri, String query) throws URISyntaxException {
-        return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), query, uri.getFragment());
-    }
-
-    public static CompositeData parseComposite(URI uri) throws URISyntaxException {
-
-        CompositeData rc = new CompositeData();
-        rc.scheme = uri.getScheme();
-        String ssp = stripPrefix(uri.getSchemeSpecificPart().trim(), ""//"").trim();
-
-        parseComposite(uri, rc, ssp);
-
-        rc.fragment = uri.getFragment();
-        return rc;
-    }
-
-    /**
-     * @param uri
-     * @param rc
-     * @param ssp
-     * @throws URISyntaxException
-     */
-    private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException {
-        String componentString;
-        String params;
-
-        if (!checkParenthesis(ssp)) {
-            throw new URISyntaxException(uri.toString(), ""Not a matching number of '(' and ')' parenthesis"");
-        }
-
-        int p;
-        int intialParen = ssp.indexOf(""("");
-        if (intialParen == 0) {
-            rc.host = ssp.substring(0, intialParen);
-            p = rc.host.indexOf(""/"");
-            if (p >= 0) {
-                rc.path = rc.host.substring(p);
-                rc.host = rc.host.substring(0, p);
-            }
-            p = ssp.lastIndexOf("")"");
-            componentString = ssp.substring(intialParen + 1, p);
-            params = ssp.substring(p + 1).trim();
-        }
-        else {
-            componentString = ssp;
-            params = """";
-        }
-
-        String components[] = splitComponents(componentString);
-        rc.components = new URI[components.length];
-        for (int i = 0; i < components.length; i++) {
-            rc.components[i] = new URI(components[i].trim());
-        }
-
-        p = params.indexOf(""?"");
-        if (p >= 0) {
-            if (p > 0) {
-                rc.path = stripPrefix(params.substring(0, p), ""/"");
-            }
-            rc.parameters = parseQuery(params.substring(p + 1));
-        }
-        else {
-            if (params.length() > 0) {
-                rc.path = stripPrefix(params, ""/"");
-            }
-            rc.parameters = Collections.EMPTY_MAP;
-        }
-    }
-
-    /**
-     * @param str
-     * @return
-     */
-    private static String[] splitComponents(String str) {
-        ArrayList l = new ArrayList();
-
-        int last = 0;
-        int depth = 0;
-        char chars[] = str.toCharArray();
-        for (int i = 0; i < chars.length; i++) {
-            switch (chars[i]) {
-                case '(':
-                    depth++;
-                    break;
-                case ')':
-                    depth--;
-                    break;
-                case ',':
-                    if (depth == 0) {
-                        String s = str.substring(last, i);
-                        l.add(s);
-                        last = i + 1;
-                    }
-            }
-        }
-
-        String s = str.substring(last);
-        if (s.length() != 0) {
-            l.add(s);
-        }
-
-        String rc[] = new String[l.size()];
-        l.toArray(rc);
-        return rc;
-    }
-
-    public static String stripPrefix(String value, String prefix) {
-        if (value.startsWith(prefix)) {
-            return value.substring(prefix.length());
-        }
-        return value;
-    }
-
-    public static URI stripScheme(URI uri) throws URISyntaxException {
-        return new URI(stripPrefix(uri.getSchemeSpecificPart().trim(), ""//""));
-    }
-
-    public static String createQueryString(Map options) throws URISyntaxException {
-        try {
-            if (options.size() > 0) {
-                StringBuffer rc = new StringBuffer();
-                boolean first = true;
-                for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
-                    if (first) {
-                        first = false;
-                    }
-                    else {
-                        rc.append(""&"");
-                    }
-
-                    String key = (String) iter.next();
-                    String value = (String) options.get(key);
-                    rc.append(URLEncoder.encode(key, ""UTF-8""));
-                    rc.append(""="");
-                    rc.append(URLEncoder.encode(value, ""UTF-8""));
-                }
-                return rc.toString();
-            }
-            else {
-                return """";
-            }
-        }
-        catch (UnsupportedEncodingException e) {
-            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
-        }
-    }
-
-    /**
-     * Creates a URI from the original URI and the remaining paramaters
-     *
-     * @throws URISyntaxException
-     */
-    public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
-        String s = createQueryString(params);
-        if (s.length() == 0) {
-            s = null;
-        }
-        return createURIWithQuery(originalURI, s);
-    }
-
-    static public URI changeScheme(URI bindAddr, String scheme) throws URISyntaxException {
-        return new URI(scheme, bindAddr.getUserInfo(), bindAddr.getHost(), bindAddr.getPort(), bindAddr.getPath(), bindAddr.getQuery(), bindAddr.getFragment());
-    }
-
-    public static boolean checkParenthesis(String str) {
-        boolean result = true;
-        if (str != null) {
-            int open = 0;
-            int closed = 0;
-
-            int i = 0;
-            while ((i = str.indexOf('(', i)) >= 0) {
-                i++;
-                open++;
-            }
-            i = 0;
-            while ((i = str.indexOf(')', i)) >= 0) {
-                i++;
-                closed++;
-            }
-            result = open == closed;
-        }
-        return result;
-    }
-
-    public int indexOfParenthesisMatch(String str) {
-        int result = -1;
-
-        return result;
-    }
-}
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.util;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URLDecoder;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * @version $Revision$
+ */
+public class URISupport {
+    public static class CompositeData {
+        String scheme;
+        String path;
+        URI components[];
+        Map parameters;
+        String fragment;
+        public String host;
+
+        public URI[] getComponents() {
+            return components;
+        }
+
+        public String getFragment() {
+            return fragment;
+        }
+
+        public Map getParameters() {
+            return parameters;
+        }
+
+        public String getScheme() {
+            return scheme;
+        }
+
+        public String getPath() {
+            return path;
+        }
+
+        public String getHost() {
+            return host;
+        }
+
+        public URI toURI() throws URISyntaxException {
+            StringBuffer sb = new StringBuffer();
+            if (scheme != null) {
+                sb.append(scheme);
+                sb.append(':');
+            }
+
+            if (host != null && host.length() != 0) {
+                sb.append(host);
+            }
+            else {
+                sb.append('(');
+                for (int i = 0; i < components.length; i++) {
+                    if (i != 0) {
+                        sb.append(',');
+                    }
+                    sb.append(components[i].toString());
+                }
+                sb.append(')');
+            }
+
+            if (path != null) {
+                sb.append('/');
+                sb.append(path);
+            }
+            if (!parameters.isEmpty()) {
+                sb.append(""?"");
+                sb.append(createQueryString(parameters));
+            }
+            if (fragment != null) {
+                sb.append(""#"");
+                sb.append(fragment);
+            }
+            return new URI(sb.toString());
+        }
+    }
+
+    public static Map parseQuery(String uri) throws URISyntaxException {
+        try {
+            Map rc = new HashMap();
+            if (uri != null) {
+                String[] parameters = uri.split(""&"");
+                for (int i = 0; i < parameters.length; i++) {
+                    int p = parameters[i].indexOf(""="");
+                    if (p >= 0) {
+                        String name = URLDecoder.decode(parameters[i].substring(0, p), ""UTF-8"");
+                        String value = URLDecoder.decode(parameters[i].substring(p + 1), ""UTF-8"");
+                        rc.put(name, value);
+                    }
+                    else {
+                        rc.put(parameters[i], null);
+                    }
+                }
+            }
+            return rc;
+        }
+        catch (UnsupportedEncodingException e) {
+            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
+        }
+    }
+
+    public static Map parseParamters(URI uri) throws URISyntaxException {
+        String query = uri.getQuery();
+        if (query == null) {
+            String schemeSpecificPart = uri.getSchemeSpecificPart();
+            int idx = schemeSpecificPart.lastIndexOf('?');
+            if (idx < 0) {
+                return Collections.EMPTY_MAP;
+            }
+            else {
+                query = schemeSpecificPart.substring(idx + 1);
+            }
+        }
+        else {
+            query = stripPrefix(query, ""?"");
+        }
+        return parseQuery(query);
+    }
+
+    /**
+     * Removes any URI query from the given uri
+     */
+    public static URI removeQuery(URI uri) throws URISyntaxException {
+        return createURIWithQuery(uri, null);
+    }
+
+    /**
+     * Creates a URI with the given query
+     */
+    public static URI createURIWithQuery(URI uri, String query) throws URISyntaxException {
+        return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), query, uri.getFragment());
+    }
+
+    public static CompositeData parseComposite(URI uri) throws URISyntaxException {
+
+        CompositeData rc = new CompositeData();
+        rc.scheme = uri.getScheme();
+        String ssp = stripPrefix(uri.getSchemeSpecificPart().trim(), ""//"").trim();
+
+        parseComposite(uri, rc, ssp);
+
+        rc.fragment = uri.getFragment();
+        return rc;
+    }
+
+    /**
+     * @param uri
+     * @param rc
+     * @param ssp
+     * @throws URISyntaxException
+     */
+    private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException {
+        String componentString;
+        String params;
+
+        if (!checkParenthesis(ssp)) {
+            throw new URISyntaxException(uri.toString(), ""Not a matching number of '(' and ')' parenthesis"");
+        }
+
+        int p;
+        int intialParen = ssp.indexOf(""("");
+        if (intialParen == 0) {
+            rc.host = ssp.substring(0, intialParen);
+            p = rc.host.indexOf(""/"");
+            if (p >= 0) {
+                rc.path = rc.host.substring(p);
+                rc.host = rc.host.substring(0, p);
+            }
+            p = ssp.lastIndexOf("")"");
+            componentString = ssp.substring(intialParen + 1, p);
+            params = ssp.substring(p + 1).trim();
+        }
+        else {
+            componentString = ssp;
+            params = """";
+        }
+
+        String components[] = splitComponents(componentString);
+        rc.components = new URI[components.length];
+        for (int i = 0; i < components.length; i++) {
+            rc.components[i] = new URI(components[i].trim());
+        }
+
+        p = params.indexOf(""?"");
+        if (p >= 0) {
+            if (p > 0) {
+                rc.path = stripPrefix(params.substring(0, p), ""/"");
+            }
+            rc.parameters = parseQuery(params.substring(p + 1));
+        }
+        else {
+            if (params.length() > 0) {
+                rc.path = stripPrefix(params, ""/"");
+            }
+            rc.parameters = Collections.EMPTY_MAP;
+        }
+    }
+
+    /**
+     * @param str
+     * @return
+     */
+    private static String[] splitComponents(String str) {
+        ArrayList l = new ArrayList();
+
+        int last = 0;
+        int depth = 0;
+        char chars[] = str.toCharArray();
+        for (int i = 0; i < chars.length; i++) {
+            switch (chars[i]) {
+                case '(':
+                    depth++;
+                    break;
+                case ')':
+                    depth--;
+                    break;
+                case ',':
+                    if (depth == 0) {
+                        String s = str.substring(last, i);
+                        l.add(s);
+                        last = i + 1;
+                    }
+            }
+        }
+
+        String s = str.substring(last);
+        if (s.length() != 0) {
+            l.add(s);
+        }
+
+        String rc[] = new String[l.size()];
+        l.toArray(rc);
+        return rc;
+    }
+
+    public static String stripPrefix(String value, String prefix) {
+        if (value.startsWith(prefix)) {
+            return value.substring(prefix.length());
+        }
+        return value;
+    }
+
+    public static URI stripScheme(URI uri) throws URISyntaxException {
+        return new URI(stripPrefix(uri.getSchemeSpecificPart().trim(), ""//""));
+    }
+
+    public static String createQueryString(Map options) throws URISyntaxException {
+        try {
+            if (options.size() > 0) {
+                StringBuffer rc = new StringBuffer();
+                boolean first = true;
+                for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
+                    if (first) {
+                        first = false;
+                    }
+                    else {
+                        rc.append(""&"");
+                    }
+
+                    String key = (String) iter.next();
+                    String value = (String) options.get(key);
+                    rc.append(URLEncoder.encode(key, ""UTF-8""));
+                    rc.append(""="");
+                    rc.append(URLEncoder.encode(value, ""UTF-8""));
+                }
+                return rc.toString();
+            }
+            else {
+                return """";
+            }
+        }
+        catch (UnsupportedEncodingException e) {
+            throw (URISyntaxException) new URISyntaxException(e.toString(), ""Invalid encoding"").initCause(e);
+        }
+    }
+
+    /**
+     * Creates a URI from the original URI and the remaining paramaters
+     *
+     * @throws URISyntaxException
+     */
+    public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
+        String s = createQueryString(params);
+        if (s.length() == 0) {
+            s = null;
+        }
+        return createURIWithQuery(originalURI, s);
+    }
+
+    static public URI changeScheme(URI bindAddr, String scheme) throws URISyntaxException {
+        return new URI(scheme, bindAddr.getUserInfo(), bindAddr.getHost(), bindAddr.getPort(), bindAddr.getPath(), bindAddr.getQuery(), bindAddr.getFragment());
+    }
+
+    public static boolean checkParenthesis(String str) {
+        boolean result = true;
+        if (str != null) {
+            int open = 0;
+            int closed = 0;
+
+            int i = 0;
+            while ((i = str.indexOf('(', i)) >= 0) {
+                i++;
+                open++;
+            }
+            i = 0;
+            while ((i = str.indexOf(')', i)) >= 0) {
+                i++;
+                closed++;
+            }
+            result = open == closed;
+        }
+        return result;
+    }
+
+    public int indexOfParenthesisMatch(String str) {
+        int result = -1;
+
+        return result;
+    }
+}
",,712
52,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/util/URISupport.java,32a32c0725707e193039aa9f73f1eb9080cfd526,1181672413,311,,,,,,,,"            s = null;",,,712
53,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/tooling/camel-eclipse/camel.routing.editor/src/org/apache/camel/eclipse/camelEditorPlugin.java,32a32c0725707e193039aa9f73f1eb9080cfd526,1181672413,24,,,,,,,,"      plugin = null;",,,712
54,c5fbdd0c0492c75ef98bb9c5fdb50da43e90b2d6d101fcd511a8695ad0ec0ada36f1584327c85b23,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/camel-spring-boot/camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java,b49154101a82f12dbcbdfe8447009c3d8624d050,1183472183,159,,,,,,,,"        consumer = null;",,,712
