Detection ID,Latest Commit ID,PMD Version,Rule Name,File Path,Violation Introducing Commit ID,VIC Date,VIC Line Num.,Latest Detection Commit ID,LDC ID Date,LDC Line Num.,Violation Fixed Commit ID,VFC Date,VFC Line Num.,Fixed Period(day),Original Code,Fixed Code,Really Fixed?,Time
5623,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/bzip2/CBZip2InputStream.java,f34016d0fce891d13371ec11099b6b715d15099f,1026166544,207,fcb1f1dc86e216faca4bdb9626200d99a6d9915a,1026599866,260,,,,,"        cftab = null;",,,24110
5624,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/bzip2/CBZip2InputStream.java,f34016d0fce891d13371ec11099b6b715d15099f,1026166544,613,fcb1f1dc86e216faca4bdb9626200d99a6d9915a,1026599866,666,,,,,"        m_input = null;",,,24110
5625,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/bzip2/CBZip2OutputStream.java,f34016d0fce891d13371ec11099b6b715d15099f,1026166544,1656,fcb1f1dc86e216faca4bdb9626200d99a6d9915a,1026599866,1709,,,,,"        rfreq = null;",,,24110
5626,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/bzip2/CBZip2OutputStream.java,f34016d0fce891d13371ec11099b6b715d15099f,1026166544,1657,fcb1f1dc86e216faca4bdb9626200d99a6d9915a,1026599866,1710,,,,,"        fave = null;",,,24110
5627,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/bzip2/CBZip2OutputStream.java,f34016d0fce891d13371ec11099b6b715d15099f,1026166544,1658,fcb1f1dc86e216faca4bdb9626200d99a6d9915a,1026599866,1711,,,,,"        cost = null;",,,24110
5628,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/tar/TarBuffer.java,70492febc8a6384aeec79676cf74911bc43ac3c6,1026166569,171,f3454e26015b9880f596bf26e1c25f461763aae5,1066028782,224,,,,,"                m_output = null;",,,24110
5629,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/tar/TarBuffer.java,70492febc8a6384aeec79676cf74911bc43ac3c6,1026166569,179,f3454e26015b9880f596bf26e1c25f461763aae5,1066028782,232,,,,,"                m_input = null;",,,24110
5630,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/tar/TarInputStream.java,70492febc8a6384aeec79676cf74911bc43ac3c6,1026166569,131,f3454e26015b9880f596bf26e1c25f461763aae5,1066028782,184,,,,,"            m_readBuf = null;",,,24110
5631,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/tar/TarInputStream.java,70492febc8a6384aeec79676cf74911bc43ac3c6,1026166569,154,f3454e26015b9880f596bf26e1c25f461763aae5,1066028782,207,,,,,"            m_currEntry = null;",,,24110
5632,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/tar/TarInputStream.java,70492febc8a6384aeec79676cf74911bc43ac3c6,1026166569,351,f3454e26015b9880f596bf26e1c25f461763aae5,1066028782,404,,,,,"                m_readBuf = null;",,,24110
5633,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/compress/zip/ZipOutputStream.java,e44faf9fa20c0213106c81ad8e25e7a527d97d15,1026166597,357,f3454e26015b9880f596bf26e1c25f461763aae5,1066028782,410,,,,,"        m_entry = null;",,,24110
5634,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/input/SwappedDataInputStreamTest.java,a79668954b565a73be56de928e1c62cd05a50cc9,1073028678,107,86e4b30ba700cb8bcf4d7488e0d60e07a75d6315,1283966152,60,,,,,"        this.sdis = null;",,,24110
5635,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/output/DeferredFileOutputStream.java,7f6039cf23c4a3804518d97db05e348d7433ded9,1075621056,168,d4c5044c7b7697d944a444470a296dcd15911595,1232676142,184,,,,,"        memoryOutputStream = null;",,,24110
5636,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,daedcb79bcb483f96214be190d7d1f02be8aef86,1079589854,81,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,88,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1079589854,"        testFile = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5637,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,daedcb79bcb483f96214be190d7d1f02be8aef86,1079589854,82,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,89,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1079589854,"        r = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5638,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/output/DeferredFileOutputStream.java,48860dcdd0de779102e734cc103a3e4f778f45e5,1124228741,116,4b1b80c2cc232fb6e70a4a6fe7058180e9ab2728,1156747147,126,,,,,"        memoryOutputStream = null;",,,24110
5639,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/LineIterator.java,22db7febb9fedfd8e8a92c6def23e0fc3d7da0ed,1136508298,125,d52d1440f5bce727ce4d5b23813c6bbad1aeb1cd,1268356895,143,,,,,"        cachedLine = null;",,,24110
5640,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/LineIterator.java,22db7febb9fedfd8e8a92c6def23e0fc3d7da0ed,1136508298,140,4fb9946cf2af3076f2a8f17682cbb16752dc1446,1141589934,140,62ae9ca81916868ea2408c335b6585d3c384fa76,1141692558,-1,1141692558/1136508298,"            cachedLine = null;","      * Closes the underlying <code>Reader</code> quietly.
      * This method is useful if you only want to process the first few
      * lines of a larger file. If you do not close the iterator
-     * then the <code>Reader</code> remains open and is a resource leak.
+     * then the <code>Reader</code> remains open.
      * This method can safely be called multiple times.
      */
     public void close() {
-        if (!finished) {
-            IOUtils.closeQuietly(bufferedReader);
-            finished = true;
-            cachedLine = null;
-        }
+        finished = true;
+        IOUtils.closeQuietly(bufferedReader);
+        cachedLine = null;
     }
 
     /**
",,24110
5641,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/LineIterator.java,62ae9ca81916868ea2408c335b6585d3c384fa76,1141692558,132,d52d1440f5bce727ce4d5b23813c6bbad1aeb1cd,1268356895,157,,,,,"        cachedLine = null;",,,24110
5642,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,dc5bb1187f027d3b9cdc70d3517c442d7b4c45ef,1157067271,100,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,107,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1157067271,"        obj = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5643,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,dc5bb1187f027d3b9cdc70d3517c442d7b4c45ef,1157067271,120,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,126,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1157067271,"        obj = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5644,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,dc5bb1187f027d3b9cdc70d3517c442d7b4c45ef,1157067271,140,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,145,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1157067271,"        obj = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5645,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/DirectoryWalker.java,25a080279d01e0556091d64eef5908bdf66b5811,1160835988,312,724d798408a98141d537976a6c924ed8f5501fce,1285966439,302,,,,,"            this.filter = null;",,,24110
5646,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,72,,,,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1165281185,"        FileCleaner.reaper = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5647,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,231,,,,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1165281185,"        testFile = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5648,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,232,,,,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1165281185,"        r = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5649,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,256,,,,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1165281185,"        testFile = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5650,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleanerTestCase.java,9c18390762527fe8d1bf7af8ded586566cdbb59c,1165281185,257,,,,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,-1,1173855003/1165281185,"        r = null;"," 
     public FileCleanerTestCase(String name) throws IOException {
         super(name);
-
-        testFile = new File(getTestDirectory(), ""file-test.txt"");
-    }
-
-    /** @see junit.framework.TestCase#setUp() */
-    protected void setUp() throws Exception {
-        getTestDirectory().mkdirs();
-    }
-
-    /** @see junit.framework.TestCase#tearDown() */
-    protected void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        
-        // reset file cleaner class, so as not to break other tests
-        FileCleaner.q = new ReferenceQueue();
-        FileCleaner.trackers = new Vector();
-        FileCleaner.exitWhenFinished = false;
-        FileCleaner.reaper = null;
-    }
-
-    //-----------------------------------------------------------------------
-    public void testFileCleanerFile() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-    }
-
-    public void testFileCleanerDirectory() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_NullStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, (FileDeleteStrategy) null);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, testFile.exists());  // not deleted, as dir not empty
-        assertEquals(true, testFile.getParentFile().exists());  // not deleted, as dir not empty
-    }
-
-    public void testFileCleanerDirectory_ForceStrategy() throws Exception {
-        createFile(testFile, 100);
-        assertEquals(true, testFile.exists());
-        assertEquals(true, getTestDirectory().exists());
-        
-        Object obj = new Object();
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(getTestDirectory(), obj, FileDeleteStrategy.FORCE);
-        assertEquals(1, FileCleaner.getTrackCount());
-        
-        obj = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, testFile.exists());
-        assertEquals(false, testFile.getParentFile().exists());
-    }
-
-    public void testFileCleanerNull() throws Exception {
-        try {
-            FileCleaner.track((File) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((File) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object());
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-        try {
-            FileCleaner.track((String) null, new Object(), FileDeleteStrategy.NORMAL);
-            fail();
-        } catch (NullPointerException ex) {
-            // expected
-        }
-    }
-
-    public void testFileCleanerExitWhenFinishedFirst() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws Exception {
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-        
-        String path = testFile.getPath();
-        Object marker = new Object();
-        try {
-            FileCleaner.track(path, marker);
-            fail();
-        } catch (IllegalStateException ex) {
-            // expected
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(null, FileCleaner.reaper);
-    }
-
-    public void testFileCleanerExitWhenFinished1() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    public void testFileCleanerExitWhenFinished2() throws Exception {
-        String path = testFile.getPath();
-        
-        assertEquals(false, testFile.exists());
-        RandomAccessFile r = new RandomAccessFile(testFile, ""rw"");
-        assertEquals(true, testFile.exists());
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        FileCleaner.track(path, r);
-        assertEquals(1, FileCleaner.getTrackCount());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        r.close();
-        testFile = null;
-        r = null;
-
-        waitUntilTrackCount();
-        
-        assertEquals(0, FileCleaner.getTrackCount());
-        assertEquals(false, new File(path).exists());
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        assertEquals(true, FileCleaner.reaper.isAlive());
-        
-        assertEquals(false, FileCleaner.exitWhenFinished);
-        FileCleaner.exitWhenFinished();
-        for (int i = 0; i < 20 && FileCleaner.reaper.isAlive(); i++) {
-            Thread.sleep(500L);  // allow reaper thread to die
-        }
-        assertEquals(true, FileCleaner.exitWhenFinished);
-        assertEquals(false, FileCleaner.reaper.isAlive());
-    }
-
-    //-----------------------------------------------------------------------
-    private void waitUntilTrackCount() {
-        while (FileCleaner.getTrackCount() != 0) {
-            int total = 0;
-            while (FileCleaner.getTrackCount() != 0) {
-                byte[] b = new byte[1024 * 1024];
-                b[0] = (byte) System.currentTimeMillis();
-                total = total + b[0];
-                System.gc();
-            }
-        }
     }
 }
",,24110
5651,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,84,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,75,,,,,"            theInstance.reaper = null;",,,24110
5652,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,87,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,78,,,,,"        theInstance = null;",,,24110
5653,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,103,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,94,,,,,"        testFile = null;",,,24110
5654,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,104,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,95,,,,,"        r = null;",,,24110
5655,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,122,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,113,,,,,"        obj = null;",,,24110
5656,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,141,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,132,,,,,"        obj = null;",,,24110
5657,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,160,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,151,,,,,"        obj = null;",,,24110
5658,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,246,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,237,,,,,"        testFile = null;",,,24110
5659,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,247,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,238,,,,,"        r = null;",,,24110
5660,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,271,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,262,,,,,"        testFile = null;",,,24110
5661,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,431c428c4df6a7197a8703ad50f9dc5d3501130b,1173855003,272,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,263,,,,,"        r = null;",,,24110
5662,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/filefilter/DelegateFileFilter.java,fe3554cc2c0ab534e90742d03d5663c30a173973,1193932025,49,91509112bb42d52eb4cef40f2dee16a3633b446f,1211635390,49,,,,,"        this.fileFilter = null;",,,24110
5663,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/filefilter/DelegateFileFilter.java,fe3554cc2c0ab534e90742d03d5663c30a173973,1193932025,62,91509112bb42d52eb4cef40f2dee16a3633b446f,1211635390,62,,,,,"        this.filenameFilter = null;",,,24110
5664,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,55dfa6eb4b3f1666a0a281e40657252054f0e6b7,1199579442,62,5a01ecd9dd08efa1113ca1c483c3127120ec59ab,1271809629,68,,,,,"        comparator = null;",,,24110
5665,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,55dfa6eb4b3f1666a0a281e40657252054f0e6b7,1199579442,63,5a01ecd9dd08efa1113ca1c483c3127120ec59ab,1271809629,69,,,,,"        reverse = null;",,,24110
5666,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,55dfa6eb4b3f1666a0a281e40657252054f0e6b7,1199579442,64,5a01ecd9dd08efa1113ca1c483c3127120ec59ab,1271809629,70,,,,,"        equalFile1 = null;",,,24110
5667,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,55dfa6eb4b3f1666a0a281e40657252054f0e6b7,1199579442,65,5a01ecd9dd08efa1113ca1c483c3127120ec59ab,1271809629,71,,,,,"        equalFile2 = null;",,,24110
5668,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,55dfa6eb4b3f1666a0a281e40657252054f0e6b7,1199579442,66,5a01ecd9dd08efa1113ca1c483c3127120ec59ab,1271809629,72,,,,,"        lessFile = null;",,,24110
5669,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,55dfa6eb4b3f1666a0a281e40657252054f0e6b7,1199579442,67,5a01ecd9dd08efa1113ca1c483c3127120ec59ab,1271809629,73,,,,,"        moreFile = null;",,,24110
5670,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/output/FileWriterWithEncodingTest.java,deabf6a6b0eed1d677006ea3db6f349417dd50af,1199766000,70,9c47f241d0eb912c276da809b02f0febb4736f84,1250722991,72,,,,,"        defaultEncoding = null;",,,24110
5671,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/output/FileWriterWithEncodingTest.java,deabf6a6b0eed1d677006ea3db6f349417dd50af,1199766000,73,9c47f241d0eb912c276da809b02f0febb4736f84,1250722991,75,,,,,"        textContent = null;",,,24110
5672,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/BOMExclusionInputStream.java,3e8e057385f3fe803bff6efcb074602a3443f3cc,1228008252,149,,,,,,,,"            firstBytes = null;",,,24110
5673,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java,328a7efc17e8c77853fea42a84808dd1d26c8d5a,1228348974,305,803484d8d5ba799e76ee241920662cf23aa40630,1285972666,295,,,,,"            list = null;",,,24110
5674,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/BOMInputStream.java,ea84049a791cfe83d9fb93e0cdea74dd362b0692,1286149459,303,5a21350fb904af0f0e0f8d1cc5ce484c7183dd13,1286172901,314,,,,,"            firstBytes = null;",,,24110
5675,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/XmlStreamReader.java,5b75cf83b2db408f8228b26910a8d3d3633cd54f,1286161189,367,5a21350fb904af0f0e0f8d1cc5ce484c7183dd13,1286172901,387,,,,,"                    ex = null;",,,24110
5676,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/XmlStreamReader.java,5b75cf83b2db408f8228b26910a8d3d3633cd54f,1286161189,552,2fbbf47aaf12f3efc333caf06bb61d63472d610e,1286161487,574,,,,,"                encoding = (m.find()) ? m.group(1) : null;",,,24110
5677,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/XmlStreamReader.java,5b75cf83b2db408f8228b26910a8d3d3633cd54f,1286161189,553,2fbbf47aaf12f3efc333caf06bb61d63472d610e,1286161487,575,,,,,"                encoding = (encoding != null) ? encoding.toUpperCase() : null;",,,24110
5678,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/output/XmlStreamWriter.java,5b75cf83b2db408f8228b26910a8d3d3633cd54f,1286161189,117,,,,,,,,"                xmlPrologWriter = null;",,,24110
5679,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/XmlStreamReader.java,a2800c889834ee30b5e8c0971cd1efbfa980bf9a,1286164891,663,5a21350fb904af0f0e0f8d1cc5ce484c7183dd13,1286172901,633,,,,,"                encoding = (m.find()) ? m.group(1) : null;",,,24110
5680,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/input/XmlStreamReader.java,a2800c889834ee30b5e8c0971cd1efbfa980bf9a,1286164891,664,5a21350fb904af0f0e0f8d1cc5ce484c7183dd13,1286172901,634,,,,,"                encoding = (encoding != null) ? encoding.toUpperCase() : null;",,,24110
5681,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/java/org/apache/commons/io/output/XmlStreamWriter.java,a2800c889834ee30b5e8c0971cd1efbfa980bf9a,1286164891,154,5b4212d98988e6798d1ced601a2036f7e98b70e0,1286167705,155,,,,,"                xmlPrologWriter = null;",,,24110
5682,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/DirectoryWalker.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,302,f15433d69c96aec08c9a0c3c15a69edd8250ae2b,1550398915,297,,,,,"            this.filter = null;",,,24110
5683,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/LineIterator.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,143,5b2c6abaebe7622ba93b836e6ae9249b7b9a93a7,1572969886,164,,,,,"        cachedLine = null;",,,24110
5684,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/LineIterator.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,157,effe551657921069b871519156a934e4ef3ae916,1366845859,156,,,,,"        cachedLine = null;",,,24110
5685,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/filefilter/DelegateFileFilter.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,49,a55a369b92c0264134e9ac8e0debafb18497af07,1559244427,51,,,,,"        this.fileFilter = null;",,,24110
5686,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/filefilter/DelegateFileFilter.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,62,a55a369b92c0264134e9ac8e0debafb18497af07,1559244427,64,,,,,"        this.filenameFilter = null;",,,24110
5687,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/BOMInputStream.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,314,cf5c462807a137b823a3155dfe9800b3cbf2303d,1332449729,323,,,,,"            firstBytes = null;",,,24110
5688,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReader.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,387,3fb12de7946abf01216f303bd97e1ec051a65d2e,1286318009,385,,,,,"                    ex = null;",,,24110
5689,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReader.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,633,2c13fc8148128d1a1f19f28b71acad262f24d4a3,1586827845,687,1170279dc85c2bbdea594b053c56b379a72a2104,1332207332,-1,1332207332/1286218476,"                encoding = (m.find()) ? m.group(1) : null;","             if (i > -1) {
                 String postMime = httpContentType.substring(i + 1);
                 Matcher m = CHARSET_PATTERN.matcher(postMime);
-                encoding = (m.find()) ? m.group(1) : null;
-                encoding = (encoding != null) ? encoding.toUpperCase(Locale.US) : null;
+                encoding = m.find() ? m.group(1) : null;
+                encoding = encoding != null ? encoding.toUpperCase(Locale.US) : null;
             }
         }
         return encoding;
",,24110
5690,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReader.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,634,1170279dc85c2bbdea594b053c56b379a72a2104,1332207332,641,5db7f804522957c408a9db89b69715d71a0fd8f4,1331603157,-1,1331603157/1286218476,"                encoding = (encoding != null) ? encoding.toUpperCase() : null;","                 String postMime = httpContentType.substring(i + 1);
                 Matcher m = CHARSET_PATTERN.matcher(postMime);
                 encoding = (m.find()) ? m.group(1) : null;
-                encoding = (encoding != null) ? encoding.toUpperCase() : null;
+                encoding = (encoding != null) ? encoding.toUpperCase(Locale.US) : null;
             }
         }
         return encoding;
",,24110
5691,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,184,e6832682adbd29fc47e90109a59ed5dca0c9d742,1465265952,187,,,,,"        memoryOutputStream = null;",,,24110
5692,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/XmlStreamWriter.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,155,6a78ef8903ef7c2c785b8d0cc08a150d1e2ba818,1586802066,194,,,,,"                xmlPrologWriter = null;",,,24110
5693,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,75,79b4df582d0035e196d4dc10894778fae58311ce,1478813788,75,,,,,"            theInstance.reaper = null;",,,24110
5694,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,78,eae791d517e79254474e2a5332ed83bd84657237,1570374099,82,,,,,"        theInstance = null;",,,24110
5695,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,94,eae791d517e79254474e2a5332ed83bd84657237,1570374099,99,,,,,"        testFile = null;",,,24110
5696,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,95,eae791d517e79254474e2a5332ed83bd84657237,1570374099,100,,,,,"        r = null;",,,24110
5697,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,113,eae791d517e79254474e2a5332ed83bd84657237,1570374099,120,,,,,"        obj = null;",,,24110
5698,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,132,eae791d517e79254474e2a5332ed83bd84657237,1570374099,140,,,,,"        obj = null;",,,24110
5699,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,151,9264ccd2857cc25cabf6a309f323dd95ed319495,1434643076,148,,,,,"        obj = null;",,,24110
5700,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,237,eae791d517e79254474e2a5332ed83bd84657237,1570374099,258,,,,,"        testFile = null;",,,24110
5701,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,238,9264ccd2857cc25cabf6a309f323dd95ed319495,1434643076,236,,,,,"        r = null;",,,24110
5702,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,262,eae791d517e79254474e2a5332ed83bd84657237,1570374099,285,,,,,"        testFile = null;",,,24110
5703,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,263,eae791d517e79254474e2a5332ed83bd84657237,1570374099,286,,,,,"        r = null;",,,24110
5704,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,295,eae791d517e79254474e2a5332ed83bd84657237,1570374099,337,,,,,"            list = null;",,,24110
5705,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,68,27de9894f9e9102eac91fa928eb1443001a89feb,1506539155,69,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        comparator = null;","     /** File which is more than the ""lessFile"" */
     protected File moreFile;
 
-    /** @see junit.framework.TestCase#tearDown() */
-    @After
-    public void tearDown() throws Exception {
-        comparator = null;
-        reverse = null;
-        equalFile1 = null;
-        equalFile2 = null;
-        lessFile = null;
-        moreFile = null;
-        FileUtils.deleteDirectory(getTestDirectory());
-    }
-
     /**
      * Test the comparator.
      */
",,24110
5706,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,69,27de9894f9e9102eac91fa928eb1443001a89feb,1506539155,70,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        reverse = null;","     /** File which is more than the ""lessFile"" */
     protected File moreFile;
 
-    /** @see junit.framework.TestCase#tearDown() */
-    @After
-    public void tearDown() throws Exception {
-        comparator = null;
-        reverse = null;
-        equalFile1 = null;
-        equalFile2 = null;
-        lessFile = null;
-        moreFile = null;
-        FileUtils.deleteDirectory(getTestDirectory());
-    }
-
     /**
      * Test the comparator.
      */
",,24110
5707,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,70,27de9894f9e9102eac91fa928eb1443001a89feb,1506539155,71,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        equalFile1 = null;","     /** File which is more than the ""lessFile"" */
     protected File moreFile;
 
-    /** @see junit.framework.TestCase#tearDown() */
-    @After
-    public void tearDown() throws Exception {
-        comparator = null;
-        reverse = null;
-        equalFile1 = null;
-        equalFile2 = null;
-        lessFile = null;
-        moreFile = null;
-        FileUtils.deleteDirectory(getTestDirectory());
-    }
-
     /**
      * Test the comparator.
      */
",,24110
5708,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,71,27de9894f9e9102eac91fa928eb1443001a89feb,1506539155,72,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        equalFile2 = null;","     /** File which is more than the ""lessFile"" */
     protected File moreFile;
 
-    /** @see junit.framework.TestCase#tearDown() */
-    @After
-    public void tearDown() throws Exception {
-        comparator = null;
-        reverse = null;
-        equalFile1 = null;
-        equalFile2 = null;
-        lessFile = null;
-        moreFile = null;
-        FileUtils.deleteDirectory(getTestDirectory());
-    }
-
     /**
      * Test the comparator.
      */
",,24110
5709,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,72,27de9894f9e9102eac91fa928eb1443001a89feb,1506539155,73,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        lessFile = null;","     /** File which is more than the ""lessFile"" */
     protected File moreFile;
 
-    /** @see junit.framework.TestCase#tearDown() */
-    @After
-    public void tearDown() throws Exception {
-        comparator = null;
-        reverse = null;
-        equalFile1 = null;
-        equalFile2 = null;
-        lessFile = null;
-        moreFile = null;
-        FileUtils.deleteDirectory(getTestDirectory());
-    }
-
     /**
      * Test the comparator.
      */
",,24110
5710,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,73,27de9894f9e9102eac91fa928eb1443001a89feb,1506539155,74,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        moreFile = null;","     /** File which is more than the ""lessFile"" */
     protected File moreFile;
 
-    /** @see junit.framework.TestCase#tearDown() */
-    @After
-    public void tearDown() throws Exception {
-        comparator = null;
-        reverse = null;
-        equalFile1 = null;
-        equalFile2 = null;
-        lessFile = null;
-        moreFile = null;
-        FileUtils.deleteDirectory(getTestDirectory());
-    }
-
     /**
      * Test the comparator.
      */
",,24110
5711,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/SwappedDataInputStreamTest.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,60,eae791d517e79254474e2a5332ed83bd84657237,1570374099,60,,,,,"        this.sdis = null;",,,24110
5712,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,72,14b52eb4f630f32c66122977331bd894b9474978,1506540583,85,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        defaultEncoding = null;","         textContent = new String(arr);
     }
 
-    @After
-    public void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        defaultEncoding = null;
-        textContent = null;
-    }
-
     //-----------------------------------------------------------------------
     @Test
     public void sameEncoding_string_constructor() throws Exception {
",,24110
5713,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java,83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a,1286218476,75,14b52eb4f630f32c66122977331bd894b9474978,1506540583,86,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1286218476,"        textContent = null;","         textContent = new String(arr);
     }
 
-    @After
-    public void tearDown() throws Exception {
-        FileUtils.deleteDirectory(getTestDirectory());
-        defaultEncoding = null;
-        textContent = null;
-    }
-
     //-----------------------------------------------------------------------
     @Test
     public void sameEncoding_string_constructor() throws Exception {
",,24110
5714,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/OriginalXmlStreamReader.java,784ddb2e02b273db264b250d1b852eccac0f96dc,1286239394,367,,,,,,,,"                    ex = null;",,,24110
5715,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/OriginalXmlStreamReader.java,784ddb2e02b273db264b250d1b852eccac0f96dc,1286239394,552,,,,,,,,"                encoding = (m.find()) ? m.group(1) : null;",,,24110
5716,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/OriginalXmlStreamReader.java,784ddb2e02b273db264b250d1b852eccac0f96dc,1286239394,553,,,,,,,,"                encoding = (encoding != null) ? encoding.toUpperCase() : null;",,,24110
5717,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java,073bda909983f5a42365728e9a659c6c09464bc1,1286239908,367,6a78ef8903ef7c2c785b8d0cc08a150d1e2ba818,1586802066,374,,,,,"                    ex = null;",,,24110
5718,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java,073bda909983f5a42365728e9a659c6c09464bc1,1286239908,552,6a78ef8903ef7c2c785b8d0cc08a150d1e2ba818,1586802066,592,1170279dc85c2bbdea594b053c56b379a72a2104,1332207332,-1,1332207332/1286239908,"                encoding = (m.find()) ? m.group(1) : null;","             if (i > -1) {
                 String postMime = httpContentType.substring(i + 1);
                 Matcher m = CHARSET_PATTERN.matcher(postMime);
-                encoding = (m.find()) ? m.group(1) : null;
-                encoding = (encoding != null) ? encoding.toUpperCase() : null;
+                encoding = m.find() ? m.group(1) : null;
+                encoding = encoding != null ? encoding.toUpperCase() : null;
             }
         }
         return encoding;
",,24110
5719,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java,073bda909983f5a42365728e9a659c6c09464bc1,1286239908,553,b37ba99e8f838e0fb7df77bea2fc774d5c8e893f,1330924596,556,1170279dc85c2bbdea594b053c56b379a72a2104,1332207332,-1,1332207332/1286239908,"                encoding = (encoding != null) ? encoding.toUpperCase() : null;","             if (i > -1) {
                 String postMime = httpContentType.substring(i + 1);
                 Matcher m = CHARSET_PATTERN.matcher(postMime);
-                encoding = (m.find()) ? m.group(1) : null;
-                encoding = (encoding != null) ? encoding.toUpperCase() : null;
+                encoding = m.find() ? m.group(1) : null;
+                encoding = encoding != null ? encoding.toUpperCase() : null;
             }
         }
         return encoding;
",,24110
5720,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,689338a2a1f3d5797171fa99b96c4984a2729826,1302393255,105,556dbf37fa14e5ad080e1de982a4809a57ec52e0,1354565373,197,,,,,"        tailer=null;",,,24110
5721,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,689338a2a1f3d5797171fa99b96c4984a2729826,1302393255,163,328b693dce1d280ca149f7efa67c24c2d31f6f71,1306343405,211,,,,,"        tailer=null;",,,24110
5722,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,689338a2a1f3d5797171fa99b96c4984a2729826,1302393255,182,328b693dce1d280ca149f7efa67c24c2d31f6f71,1306343405,230,,,,,"        tailer=null;",,,24110
5723,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,02dc8c7e77db316553699f0e371f3e7803d3efbd,1306404222,143,,,,,,,,"        tailer=null;",,,24110
5724,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,02dc8c7e77db316553699f0e371f3e7803d3efbd,1306404222,212,a1e68a51892419f53bf915002dfbd5b9713a9016,1339102374,213,,,,,"        tailer=null;",,,24110
5725,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,02dc8c7e77db316553699f0e371f3e7803d3efbd,1306404222,231,a1e68a51892419f53bf915002dfbd5b9713a9016,1339102374,232,,,,,"        tailer=null;",,,24110
5726,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/ReversedLinesFileReader.java,33b0f21c557b26de02b928140ffbbff0c3b6e11a,1321407046,183,,,,,,,,"			this.leftOver = null;",,,24110
5727,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/ReversedLinesFileReader.java,33b0f21c557b26de02b928140ffbbff0c3b6e11a,1321407046,253,,,,,,,,"				leftOver = null;",,,24110
5728,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/ReversedLinesFileReader.java,33b0f21c557b26de02b928140ffbbff0c3b6e11a,1321407046,266,,,,,,,,"				leftOver = null;",,,24110
5729,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java,94afbe4621736c8183f0145f779f86e48cf2d4d6,1325900012,183,f0fdfa63b9e1e479a990f2d50b8878512ae6a980,1327096271,189,,,,,"			this.leftOver = null;",,,24110
5730,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java,94afbe4621736c8183f0145f779f86e48cf2d4d6,1325900012,253,f0fdfa63b9e1e479a990f2d50b8878512ae6a980,1327096271,259,,,,,"				leftOver = null;",,,24110
5731,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java,94afbe4621736c8183f0145f779f86e48cf2d4d6,1325900012,266,f0fdfa63b9e1e479a990f2d50b8878512ae6a980,1327096271,272,,,,,"				leftOver = null;",,,24110
5732,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java,4b62012c3c1b0cf0182bcc8d9cdcb86c360327c9,1325900985,266,6a78ef8903ef7c2c785b8d0cc08a150d1e2ba818,1586802066,396,,,,,"                leftOver = null;",,,24110
5733,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReader.java,5db7f804522957c408a9db89b69715d71a0fd8f4,1331603157,642,,,,1170279dc85c2bbdea594b053c56b379a72a2104,1332207332,-1,1332207332/1331603157,"                encoding = (encoding != null) ? encoding.toUpperCase(Locale.US) : null;","             if (i > -1) {
                 String postMime = httpContentType.substring(i + 1);
                 Matcher m = CHARSET_PATTERN.matcher(postMime);
-                encoding = (m.find()) ? m.group(1) : null;
-                encoding = (encoding != null) ? encoding.toUpperCase(Locale.US) : null;
+                encoding = m.find() ? m.group(1) : null;
+                encoding = encoding != null ? encoding.toUpperCase(Locale.US) : null;
             }
         }
         return encoding;
",,24110
5734,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java,9f48d4add42a7cdce1dc7bebd1b32daaa27fdc90,1331604094,197,6a78ef8903ef7c2c785b8d0cc08a150d1e2ba818,1586802066,299,,,,,"            this.leftOver = null;",,,24110
5735,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java,9f48d4add42a7cdce1dc7bebd1b32daaa27fdc90,1331604094,278,6a78ef8903ef7c2c785b8d0cc08a150d1e2ba818,1586802066,380,,,,,"                leftOver = null;",,,24110
5736,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,0031a91ba7b5b580b28fab5cb60d683c93e9fae8,1331947271,93,14b52eb4f630f32c66122977331bd894b9474978,1506540583,146,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1331947271,"        carr = null;","         }
     }
 
-    @After
-    public void tearDown() {
-        carr = null;
-        iarr = null;
-        try {
-            FileUtils.deleteDirectory(getTestDirectory());
-        } catch (final IOException e) {
-            throw new RuntimeException(""Could not clear up "" + getTestDirectory() + "": "" + e);
-        }
-    }
-
     @Test public void testCloseQuietly_AllCloseableIOException() {
         final Closeable closeable = new Closeable() {
             @Override
",,24110
5737,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,0031a91ba7b5b580b28fab5cb60d683c93e9fae8,1331947271,94,14b52eb4f630f32c66122977331bd894b9474978,1506540583,147,958657f3c7cdf1f1d81a139b312c032020d582f0,1506549405,-1,1506549405/1331947271,"        iarr = null;","         }
     }
 
-    @After
-    public void tearDown() {
-        carr = null;
-        iarr = null;
-        try {
-            FileUtils.deleteDirectory(getTestDirectory());
-        } catch (final IOException e) {
-            throw new RuntimeException(""Could not clear up "" + getTestDirectory() + "": "" + e);
-        }
-    }
-
     @Test public void testCloseQuietly_AllCloseableIOException() {
         final Closeable closeable = new Closeable() {
             @Override
",,24110
5738,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java,1170279dc85c2bbdea594b053c56b379a72a2104,1332207332,555,,,,,,,,"                encoding = m.find() ? m.group(1) : null;",,,24110
5739,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/BOMInputStream.java,e4c65e5424fe7a7c9795348fc855d42a247f0c00,1338907681,383,8b9fe1b01ce21003f6a6ff8391ad2a64f4d21030,1487183873,386,,,,,"            firstBytes = null;",,,24110
5740,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,50d455eb8ddfa11271880265319fd774719f75d3,1339102490,266,556dbf37fa14e5ad080e1de982a4809a57ec52e0,1354565373,269,,,,,"        tailer=null;",,,24110
5741,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,50d455eb8ddfa11271880265319fd774719f75d3,1339102490,285,d829a225f4c3a7d6ea8a36316691d1c2e2c0a767,1339111999,287,,,,,"        tailer=null;",,,24110
5742,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,d829a225f4c3a7d6ea8a36316691d1c2e2c0a767,1339111999,318,,,,,,,,"        tailer=null;",,,24110
5743,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,c395904915ca330d8944d74f9502c0f4bcf65907,1339376998,197,,,,,,,,"        tailer=null;",,,24110
5744,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,c395904915ca330d8944d74f9502c0f4bcf65907,1339376998,268,,,,,,,,"        tailer=null;",,,24110
5745,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,c395904915ca330d8944d74f9502c0f4bcf65907,1339376998,287,,,,,,,,"        tailer=null;",,,24110
5746,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,c395904915ca330d8944d74f9502c0f4bcf65907,1339376998,318,,,,,,,,"        tailer=null;",,,24110
5747,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,3789b1aa9669cff2f434eba56f57c500662ead10,1353544570,295,556dbf37fa14e5ad080e1de982a4809a57ec52e0,1354565373,295,,,,,"        tailer = null;",,,24110
5748,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,3789b1aa9669cff2f434eba56f57c500662ead10,1353544570,315,586296992e5fb4d68bf87c7914573813e1fcacd9,1432147000,325,,,,,"        tailer=null;",,,24110
5749,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,3789b1aa9669cff2f434eba56f57c500662ead10,1353544570,346,556dbf37fa14e5ad080e1de982a4809a57ec52e0,1354565373,346,,,,,"        tailer=null;",,,24110
5750,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,8d52f694da0484cb2783a8b35dad845322af0c07,1366160382,236,e4e9fc66487aa7386917030810fd468856483ab4,1449690674,254,b38438075dd34fcc19c8df877446e4014ed8579c,1450783656,-1,1450783656/1366160382,"        tailer=null;","         listener.clear();
 
         // Stop
-        tailer.stop();
-        tailer=null;
         thread.interrupt();
         TestUtils.sleep(testDelayMillis * 4);
         write(file, ""Line five"");
",,24110
5751,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,8d52f694da0484cb2783a8b35dad845322af0c07,1366160382,308,0d3290e74ffdd8be397d14fececadca5516202dd,1368693831,315,,,,,"        tailer=null;",,,24110
5752,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,8d52f694da0484cb2783a8b35dad845322af0c07,1366160382,334,586296992e5fb4d68bf87c7914573813e1fcacd9,1432147000,349,,,,,"        tailer = null;",,,24110
5753,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,8d52f694da0484cb2783a8b35dad845322af0c07,1366160382,354,2a915f5872beca562a72a1ded95652f87b5daaa3,1479504668,366,,,,,"        tailer=null;",,,24110
5754,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,8d52f694da0484cb2783a8b35dad845322af0c07,1366160382,385,586296992e5fb4d68bf87c7914573813e1fcacd9,1432147000,400,,,,,"        tailer=null;",,,24110
5755,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java,e263a7cf75537a505a69015bdf2312d4a1a0fc41,1366209573,239,65c4a9c0ec651dd99f28b9fae40378728d071985,1512468140,241,c2c2709cf7a24498292e65d2e058d7b4e7da9edb,1586304954,-1,1586304954/1366209573,"            currentBuffer = null;","             return;
         }
         synchronized (this) {
-            final int newcount = count + len;
-            int remaining = len;
-            int inBufferPos = count - filledBufferSum;
-            while (remaining > 0) {
-                final int part = Math.min(remaining, currentBuffer.length - inBufferPos);
-                System.arraycopy(b, off + len - remaining, currentBuffer, inBufferPos, part);
-                remaining -= part;
-                if (remaining > 0) {
-                    needNewBuffer(newcount);
-                    inBufferPos = 0;
-                }
-            }
-            count = newcount;
+            writeImpl(b, off, len);
         }
     }
 
-    /**
-     * Write a byte to byte array.
-     * @param b the byte to write
-     */
     @Override
     public synchronized void write(final int b) {
-        int inBufferPos = count - filledBufferSum;
-        if (inBufferPos == currentBuffer.length) {
-            needNewBuffer(count + 1);
-            inBufferPos = 0;
-        }
-        currentBuffer[inBufferPos] = (byte) b;
-        count++;
+        writeImpl(b);
     }
 
-    /**
-     * Writes the entire contents of the specified input stream to this
-     * byte stream. Bytes from the input stream are read directly into the
-     * internal buffers of this streams.
-     *
-     * @param in the input stream to read from
-     * @return total number of bytes read from the input stream
-     *         (and written to this stream)
-     * @throws IOException if an I/O error occurs while reading the input stream
-     * @since 1.4
-     */
+    @Override
     public synchronized int write(final InputStream in) throws IOException {
-        int readCount = 0;
-        int inBufferPos = count - filledBufferSum;
-        int n = in.read(currentBuffer, inBufferPos, currentBuffer.length - inBufferPos);
-        while (n != EOF) {
-            readCount += n;
-            inBufferPos += n;
-            count += n;
-            if (inBufferPos == currentBuffer.length) {
-                needNewBuffer(currentBuffer.length);
-                inBufferPos = 0;
-            }
-            n = in.read(currentBuffer, inBufferPos, currentBuffer.length - inBufferPos);
-        }
-        return readCount;
+        return writeImpl(in);
     }
 
-    /**
-     * Return the current size of the byte array.
-     * @return the current size of the byte array
-     */
+    @Override
     public synchronized int size() {
         return count;
     }
 
     /**
-     * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
-     * this class can be called after the stream has been closed without
-     * generating an {@code IOException}.
-     *
-     * @throws IOException never (this method should not declare this exception
-     * but it has to now due to backwards compatibility)
-     */
-    @Override
-    public void close() throws IOException {
-        //nop
-    }
-
-    /**
      * @see java.io.ByteArrayOutputStream#reset()
      */
+    @Override
     public synchronized void reset() {
-        count = 0;
-        filledBufferSum = 0;
-        currentBufferIndex = 0;
-        if (reuseBuffers) {
-            currentBuffer = buffers.get(currentBufferIndex);
-        } else {
-            //Throw away old buffers
-            currentBuffer = null;
-            final int size = buffers.get(0).length;
-            buffers.clear();
-            needNewBuffer(size);
-            reuseBuffers = true;
-        }
+        resetImpl();
     }
 
-    /**
-     * Writes the entire contents of this byte stream to the
-     * specified output stream.
-     *
-     * @param out  the output stream to write to
-     * @throws IOException if an I/O error occurs, such as if the stream is closed
-     * @see java.io.ByteArrayOutputStream#writeTo(OutputStream)
-     */
+    @Override
     public synchronized void writeTo(final OutputStream out) throws IOException {
-        int remaining = count;
-        for (final byte[] buf : buffers) {
-            final int c = Math.min(buf.length, remaining);
-            out.write(buf, 0, c);
-            remaining -= c;
-            if (remaining == 0) {
-                break;
-            }
-        }
+        writeToImpl(out);
     }
 
     /**
",,24110
5756,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,7c58d8a9919c5c9dbc1485a21d56bb3f37444060,1434912289,353,4d49a1953e287fffbd10ba2707ed1b3806eef21b,1449690630,366,,,,,"        tailer=null;",,,24110
5757,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,7c58d8a9919c5c9dbc1485a21d56bb3f37444060,1434912289,378,b34408aa82918b6fa8cd4033921d0331d8ef2b5a,1447347206,378,5411db017b093f0995a9b7807a6a4dabb0f1e0ea,1492961240,-1,1492961240/1434912289,"        tailer = null;","         // Use a long delay to try to make sure the test thread calls interrupt() while the tailer thread is sleeping.
         final int delay = 1000;
         final int idle = 50; // allow time for thread to work
-        Tailer tailer = new Tailer(file, listener, delay, false, 4096);
+        tailer = new Tailer(file, listener, delay, false, 4096);
         final Thread thread = new Thread(tailer);
         thread.setDaemon(true);
         thread.start();
         TestUtils.sleep(idle);
         thread.interrupt();
-        tailer = null;
         TestUtils.sleep(delay + idle);
         assertNotNull(""Missing InterruptedException"", listener.exception);
         assertTrue(""Unexpected Exception: "" + listener.exception, listener.exception instanceof InterruptedException);
",,24110
5758,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,7c58d8a9919c5c9dbc1485a21d56bb3f37444060,1434912289,399,b34408aa82918b6fa8cd4033921d0331d8ef2b5a,1447347206,399,,,,,"        tailer=null;",,,24110
5759,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,7c58d8a9919c5c9dbc1485a21d56bb3f37444060,1434912289,431,722a5af4f1786599f22e91a34af459883c7a6a8b,1492960334,429,,,,,"        tailer=null;",,,24110
5760,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,4d49a1953e287fffbd10ba2707ed1b3806eef21b,1449690630,167,eae791d517e79254474e2a5332ed83bd84657237,1570374099,167,,,,,"        obj = null;",,,24110
5761,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,4d49a1953e287fffbd10ba2707ed1b3806eef21b,1449690630,258,fcca356d6a1bf190d335ed1db4cba5233f7b24d2,1506540500,263,,,,,"        testFile = null;",,,24110
5762,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,4d49a1953e287fffbd10ba2707ed1b3806eef21b,1449690630,392,722a5af4f1786599f22e91a34af459883c7a6a8b,1492960334,374,,,,,"        tailer = null;",,,24110
5763,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,4d49a1953e287fffbd10ba2707ed1b3806eef21b,1449690630,414,722a5af4f1786599f22e91a34af459883c7a6a8b,1492960334,396,,,,,"        tailer=null;",,,24110
5764,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,b38438075dd34fcc19c8df877446e4014ed8579c,1450783656,263,722a5af4f1786599f22e91a34af459883c7a6a8b,1492960334,255,,,,,"        tailer=null;",,,24110
5765,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,d9406824aeba0e977c0692971a6dbb2e62823886,1461714915,515,6aa7ba1d927cc57769d4ed589326053849b235ea,1461778329,516,,,,,"            inr = null;",,,24110
5766,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,d9406824aeba0e977c0692971a6dbb2e62823886,1461714915,518,6aa7ba1d927cc57769d4ed589326053849b235ea,1461778329,519,,,,,"            in = null;",,,24110
5767,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,d9406824aeba0e977c0692971a6dbb2e62823886,1461714915,522,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,540,,,,,"                out = null;",,,24110
5768,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,d9406824aeba0e977c0692971a6dbb2e62823886,1461714915,527,6aa7ba1d927cc57769d4ed589326053849b235ea,1461778329,528,,,,,"                err = null;",,,24110
5769,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c,1461715185,1159,,,,,,,,"            output = null;",,,24110
5770,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c,1461715185,1162,,,,,,,,"            fos = null;",,,24110
5771,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c,1461715185,1165,,,,,,,,"            input = null;",,,24110
5772,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c,1461715185,1168,,,,,,,,"            fis = null;",,,24110
5773,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,3206b41cc6b60ef2854273ab0eee5e406f9f6efa,1462577014,524,7479b372cd4291d2a51e51dd10690952d9fd7019,1478734709,523,,,,,"            inr = null;",,,24110
5774,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,3206b41cc6b60ef2854273ab0eee5e406f9f6efa,1462577014,527,bfe3c22bc3e866fc499433faf57a9239d4f6e1f2,1506779341,536,,,,,"            in = null;",,,24110
5775,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,3206b41cc6b60ef2854273ab0eee5e406f9f6efa,1462577014,531,bfe3c22bc3e866fc499433faf57a9239d4f6e1f2,1506779341,540,,,,,"                out = null;",,,24110
5776,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,3206b41cc6b60ef2854273ab0eee5e406f9f6efa,1462577014,536,bfe3c22bc3e866fc499433faf57a9239d4f6e1f2,1506779341,545,,,,,"                err = null;",,,24110
5777,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/LineIterator.java,c1d92d87157b7d5a27aa989eff14e302e15f96d7,1462577903,147,5b2c6abaebe7622ba93b836e6ae9249b7b9a93a7,1572969886,148,,,,,"        cachedLine = null;",,,24110
5778,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java,65e1c9c38becbee2f84d822cd65fd7dbce42b903,1471395057,189,,,,,,,,"        memoryOutputStream = null;",,,24110
5779,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java,7479b372cd4291d2a51e51dd10690952d9fd7019,1478734709,242,14b52eb4f630f32c66122977331bd894b9474978,1506540583,242,c2c2709cf7a24498292e65d2e058d7b4e7da9edb,1586304954,-1,1586304954/1478734709,"            currentBuffer = null;","             return;
         }
         synchronized (this) {
-            final int newcount = count + len;
-            int remaining = len;
-            int inBufferPos = count - filledBufferSum;
-            while (remaining > 0) {
-                final int part = Math.min(remaining, currentBuffer.length - inBufferPos);
-                System.arraycopy(b, off + len - remaining, currentBuffer, inBufferPos, part);
-                remaining -= part;
-                if (remaining > 0) {
-                    needNewBuffer(newcount);
-                    inBufferPos = 0;
-                }
-            }
-            count = newcount;
+            writeImpl(b, off, len);
         }
     }
 
-    /**
-     * Write a byte to byte array.
-     * @param b the byte to write
-     */
     @Override
     public synchronized void write(final int b) {
-        int inBufferPos = count - filledBufferSum;
-        if (inBufferPos == currentBuffer.length) {
-            needNewBuffer(count + 1);
-            inBufferPos = 0;
-        }
-        currentBuffer[inBufferPos] = (byte) b;
-        count++;
+        writeImpl(b);
     }
 
-    /**
-     * Writes the entire contents of the specified input stream to this
-     * byte stream. Bytes from the input stream are read directly into the
-     * internal buffers of this streams.
-     *
-     * @param in the input stream to read from
-     * @return total number of bytes read from the input stream
-     *         (and written to this stream)
-     * @throws IOException if an I/O error occurs while reading the input stream
-     * @since 1.4
-     */
+    @Override
     public synchronized int write(final InputStream in) throws IOException {
-        int readCount = 0;
-        int inBufferPos = count - filledBufferSum;
-        int n = in.read(currentBuffer, inBufferPos, currentBuffer.length - inBufferPos);
-        while (n != EOF) {
-            readCount += n;
-            inBufferPos += n;
-            count += n;
-            if (inBufferPos == currentBuffer.length) {
-                needNewBuffer(currentBuffer.length);
-                inBufferPos = 0;
-            }
-            n = in.read(currentBuffer, inBufferPos, currentBuffer.length - inBufferPos);
-        }
-        return readCount;
+        return writeImpl(in);
     }
 
-    /**
-     * Return the current size of the byte array.
-     * @return the current size of the byte array
-     */
+    @Override
     public synchronized int size() {
         return count;
     }
 
     /**
-     * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
-     * this class can be called after the stream has been closed without
-     * generating an {@code IOException}.
-     *
-     * @throws IOException never (this method should not declare this exception
-     * but it has to now due to backwards compatibility)
-     */
-    @Override
-    public void close() throws IOException {
-        //nop
-    }
-
-    /**
      * @see java.io.ByteArrayOutputStream#reset()
      */
+    @Override
     public synchronized void reset() {
-        count = 0;
-        filledBufferSum = 0;
-        currentBufferIndex = 0;
-        if (reuseBuffers) {
-            currentBuffer = buffers.get(currentBufferIndex);
-        } else {
-            //Throw away old buffers
-            currentBuffer = null;
-            final int size = buffers.get(0).length;
-            buffers.clear();
-            needNewBuffer(size);
-            reuseBuffers = true;
-        }
+        resetImpl();
     }
 
-    /**
-     * Writes the entire contents of this byte stream to the
-     * specified output stream.
-     *
-     * @param out  the output stream to write to
-     * @throws IOException if an I/O error occurs, such as if the stream is closed
-     * @see java.io.ByteArrayOutputStream#writeTo(OutputStream)
-     */
+    @Override
     public synchronized void writeTo(final OutputStream out) throws IOException {
-        int remaining = count;
-        for (final byte[] buf : buffers) {
-            final int c = Math.min(buf.length, remaining);
-            out.write(buf, 0, c);
-            remaining -= c;
-            if (remaining == 0) {
-                break;
-            }
-        }
+        writeToImpl(out);
     }
 
     /**
",,24110
5780,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java,7479b372cd4291d2a51e51dd10690952d9fd7019,1478734709,231,401d17349e7ec52d8fa866c35efd24103f332c29,1590927084,230,,,,,"        memoryOutputStream = null;",,,24110
5781,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/input/TailerTest.java,722a5af4f1786599f22e91a34af459883c7a6a8b,1492960334,348,,,,,,,,"        tailer=null;",,,24110
5782,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/BOMInputStream.java,d4f28d7ff397386b208823c577180938e15769d3,1496510981,388,e9d29f607171ab65b95a82ae2ed0ca0117aba66e,1592832962,377,,,,,"            firstBytes = null;",,,24110
5783,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/BOMInputStream.java,a768fe9aacf04cce58441ba5cbe6e0d03c2a11d8,1506535203,388,56f2a758983611adea7308e90ae9934c973efa72,1506632587,388,,,,,"            firstBytes = null;",,,24110
5784,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,56c60017199b255f38843e33beef95e8d767a10a,1506538928,83,eae791d517e79254474e2a5332ed83bd84657237,1570374099,78,,,,,"                theInstance.reaper = null;",,,24110
5785,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,533,,,,,,,,"            inr = null;",,,24110
5786,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,536,,,,,,,,"            in = null;",,,24110
5787,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,545,,,,,,,,"                err = null;",,,24110
5788,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,83,,,,,,,,"                theInstance.reaper = null;",,,24110
5789,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,87,,,,,,,,"        theInstance = null;",,,24110
5790,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,104,,,,,,,,"        testFile = null;",,,24110
5791,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,105,,,,,,,,"        r = null;",,,24110
5792,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,125,,,,,,,,"        obj = null;",,,24110
5793,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,145,,,,,,,,"        obj = null;",,,24110
5794,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,172,,,,,,,,"        obj = null;",,,24110
5795,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,263,,,,,,,,"        testFile = null;",,,24110
5796,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,264,eae791d517e79254474e2a5332ed83bd84657237,1570374099,259,,,,,"        r = null;",,,24110
5797,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,290,,,,,,,,"        testFile = null;",,,24110
5798,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,291,,,,,,,,"        r = null;",,,24110
5799,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java,5f88079956ba7fc4551a5fc51dc28d82e33dc65f,1507982309,342,,,,,,,,"            list = null;",,,24110
5800,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/DirectoryWalker.java,25c09bc20b639bde3879745325c89299f44a4d20,1558014919,320,8db20da2ea53b8598e92fc0672482a74acb06845,1577311842,322,,,,,"            this.filter = null;",,,24110
5801,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/LineIterator.java,14d6f4c6dbb429ebb915b530ea61fe911d36b20b,1572975351,144,7a26933008ecb89c3ddfdf0703b281c5293b712e,1572975402,144,,,,,"        cachedLine = null;",,,24110
5802,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/LineIterator.java,14d6f4c6dbb429ebb915b530ea61fe911d36b20b,1572975351,160,7a26933008ecb89c3ddfdf0703b281c5293b712e,1572975402,160,,,,,"        cachedLine = null;",,,24110
5803,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/SequenceReader.java,972a5a41b54711cea3ddf94c61d4be3c416fbb43,1577113048,44,,,,46ab2532070e129ac54508bfb7a5be33a6b797bc,1577114027,-1,1577114027/1577113048,"        this.reader = this.readers.hasNext() ? this.readers.next() : null;","      */
     public SequenceReader(final Iterable<? extends Reader> readers) {
         this.readers = Objects.requireNonNull(readers, ""readers"").iterator();
-        this.reader = this.readers.hasNext() ? this.readers.next() : null;
+        this.reader = nextReader();
     }
 
     /**
",,24110
5804,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/SequenceReader.java,972a5a41b54711cea3ddf94c61d4be3c416fbb43,1577113048,63,401eae64b3ad1ddc311feceacc3eb8514f87ab77,1577124210,63,,,,,"        this.readers = null;",,,24110
5805,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/SequenceReader.java,972a5a41b54711cea3ddf94c61d4be3c416fbb43,1577113048,64,401eae64b3ad1ddc311feceacc3eb8514f87ab77,1577124210,64,,,,,"        this.reader = null;",,,24110
5806,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/SequenceReader.java,972a5a41b54711cea3ddf94c61d4be3c416fbb43,1577113048,78,,,,,,,,"                reader = readers.hasNext() ? readers.next() : null;",,,24110
5807,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/SequenceReader.java,972a5a41b54711cea3ddf94c61d4be3c416fbb43,1577113048,101,,,,,,,,"                reader = readers.hasNext() ? readers.next() : null;",,,24110
5808,0373c58fd4be937e4c3bf347be1956f45d12950d9b93397478ad50d78479881426d7faf551126499c6d712823bb9d6fb62480a1e33096f6fd9aafe1e6d979e49190a48fc1c43edc0ff2b410eae09381d7965351dcf385205409adb2f5f0fe928a55f77d23f641fe61e1e3964272601012b895620a987134af362313860401024b7141489e66ee76af442eb76c2323b774725139dea401bac4837d7e706ba5ed286f66e21e1521164a87ca3ae5b60d090db214416b5521ac9a329ed8ae14e398c1a55d4e793f2ee7de3c2f65b5906073fdae5096a25d6774c3f60ac7f2256293789f5e7bb4b772fac9d9abf1ec09da73ed16d027cb732f8b37e575e3540afb8e08cd3ac0680a790f615e045bee86b7956650af9899263ed01d8c593639fdaf9fb39433f2d3626b47d3b158a487b5aaa8434102307df4cb90540703b0deaec393ba2c7165721d14ac65627856acc61e7e93a9713e2,6.25,category/java/errorprone.xml/NullAssignment,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java,c2c2709cf7a24498292e65d2e058d7b4e7da9edb,1586304954,242,401d17349e7ec52d8fa866c35efd24103f332c29,1590927084,241,,,,,"            currentBuffer = null;",,,24110
